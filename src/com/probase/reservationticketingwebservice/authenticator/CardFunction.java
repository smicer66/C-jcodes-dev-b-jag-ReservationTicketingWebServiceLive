package com.probase.reservationticketingwebservice.authenticator;


import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.UUID;
import java.net.URLEncoder;
import java.security.GeneralSecurityException;

import javax.json.Json;
import javax.json.JsonObject;
import javax.json.JsonObjectBuilder;
import javax.security.auth.login.LoginException;
import javax.ws.rs.core.Response;

import org.apache.commons.lang.RandomStringUtils;
import org.apache.log4j.Logger;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.google.gson.Gson;
import com.probase.reservationticketingwebservice.enumerations.CardStatus;
import com.probase.reservationticketingwebservice.enumerations.CardType;
import com.probase.reservationticketingwebservice.enumerations.Channel;
import com.probase.reservationticketingwebservice.enumerations.DeviceStatus;
import com.probase.reservationticketingwebservice.enumerations.PaymentMeans;
import com.probase.reservationticketingwebservice.enumerations.RequestType;
import com.probase.reservationticketingwebservice.enumerations.RoleType;
import com.probase.reservationticketingwebservice.enumerations.ServiceType;
import com.probase.reservationticketingwebservice.enumerations.TransactionStatus;
import com.probase.reservationticketingwebservice.enumerations.TripCardChargeMode;
import com.probase.reservationticketingwebservice.enumerations.TripCardType;
import com.probase.reservationticketingwebservice.enumerations.UserStatus;
import com.probase.reservationticketingwebservice.models.AuditTrail;
import com.probase.reservationticketingwebservice.models.CardScheme;
import com.probase.reservationticketingwebservice.models.Client;
import com.probase.reservationticketingwebservice.models.Customer;
import com.probase.reservationticketingwebservice.models.Device;
import com.probase.reservationticketingwebservice.models.TripCard;
import com.probase.reservationticketingwebservice.models.Transaction;
import com.probase.reservationticketingwebservice.models.User;
import com.probase.reservationticketingwebservice.models.Vendor;
import com.probase.reservationticketingwebservice.models.Wallet;
import com.probase.reservationticketingwebservice.util.Application;
import com.probase.reservationticketingwebservice.util.ERROR;
import com.probase.reservationticketingwebservice.util.PrbCustomService;
import com.probase.reservationticketingwebservice.util.ServiceLocator;
import com.probase.reservationticketingwebservice.util.SwpService;
import com.probase.reservationticketingwebservice.util.UtilityHelper;
import com.sun.org.apache.bcel.internal.generic.NEW;

public final class CardFunction {

    private static CardFunction authenticator = null;

    // A user storage which stores <username, password>
    private final Map<String, String> usersStorage = new HashMap();

    // A service key storage which stores <service_key, username>
    private final Map<String, String> serviceKeysStorage = new HashMap();

    // An authentication token storage which stores <service_key, auth_token>.
    private final Map<String, String> authorizationTokensStorage = new HashMap();
    
    private static Logger log = Logger.getLogger(CardFunction.class);
	private ServiceLocator serviceLocator = null;
	public SwpService swpService = null;
	public PrbCustomService swpCustomService = PrbCustomService.getInstance();
	Application application = null;
	SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

    private CardFunction() {
        // The usersStorage pretty much represents a user table in the database
        //usersStorage.put( "username1", "passwordForUser1" );
        //usersStorage.put( "username2", "passwordForUser2" );
        //usersStorage.put( "username3", "passwordForUser3" );

        /**
         * Service keys are pre-generated by the system and is given to the
         * authorized client who wants to have access to the REST API. Here,
         * only username1 and username2 is given the REST service access with
         * their respective service keys.
         */
        //serviceKeysStorage.put( "f80ebc87-ad5c-4b29-9366-5359768df5a1", "username1" );
        //serviceKeysStorage.put( "3b91cab8-926f-49b6-ba00-920bcf934c2a", "username2" );
    	serviceLocator = ServiceLocator.getInstance();
    }

    public static CardFunction getInstance() {
        if ( authenticator == null ) {
            authenticator = new CardFunction();
        }

        return authenticator;
    }

    
    
    public Response addNewCard(String cardSchemeCode, Integer quantity, String clientCode, 
    		String token, String requestId, String ipAddress)
	{
    	JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
    	
    	
		try{
			
			if(cardSchemeCode==null || quantity==null || clientCode==null)
			{
				jsonObject.add("status", ERROR.INCOMPLETE_PARAMETERS);
				jsonObject.add("message", "Incomplete Parameters provided in request.");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			
			if(quantity>20)
			{
				jsonObject.add("status", ERROR.CARD_CREATION_QUANTITY_MAX_EXCEEDED);
				jsonObject.add("message", "Maximum number of cards that you can create at a time is 20.");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			
			
			
			String username = verifyJ.has("username") ? verifyJ.getString("username") : null;
			String roleCode_ = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			//log.info(requestId + "username ==" + (username==null ? "" : username));
			User user = null;
			RoleType roleCode = null;
			
			if(roleCode_ != null)
			{
				roleCode = RoleType.valueOf(roleCode_);
			}
			
			if(username!=null)
			{
				user = (User)this.swpService.getUniqueRecordByHQL("select tp from User tp where tp.username = '" + username + "' AND tp.deletedAt IS NULL AND " +
						"tp.userStatus = " + UserStatus.ACTIVE.ordinal() + " AND tp.client.clientCode = '"+clientCode+"'");
				//roleCode = user.getRoleCode();
			}
			
			if(roleCode==null || (roleCode!=null && !roleCode.equals(RoleType.ADMIN_STAFF)))
			{
				jsonObject.add("status", ERROR.INVALID_CARD_SCHEME_CREATION_PRIVILEDGES);
				jsonObject.add("message", "Invalid Card Scheme Creation Priviledges");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			
			Client client = (Client)this.swpService.getUniqueRecordByHQL("Select tp from Client tp where tp.clientCode = '"+ clientCode + "' AND tp.deletedAt IS NULL");
			if(client==null)
			{
				jsonObject.add("status", ERROR.INCOMPLETE_PARAMETERS);
				jsonObject.add("message", "The clientCode is invalid");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			
			
			String hql = "Select tp from CardScheme tp where tp.schemeCode = '" + cardSchemeCode + "'";
			//log.info(requestId + "3.hql ==" + hql);
			CardScheme scheme = (CardScheme)swpService.getUniqueRecordByHQL(hql);
			if(scheme==null)
			{
				jsonObject.add("status", ERROR.CARD_SCHEME_NOT_EXISTING);
				jsonObject.add("message", "The card scheme is invalid");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			
			
			String batchId = RandomStringUtils.random(10, true, true).toUpperCase();
			
			
			JSONArray cardList = new JSONArray();
			JSONObject txnObjects = new JSONObject();
			int a =0;
			
			for(int j=0; j<quantity; j++)
			{
				String pin = RandomStringUtils.random(4, false, true);
				//log.info(requestId + "PIN ==" + pin);
				
				String pan = "";
				int cvi = new Random().nextInt(999);
				String cvv = cvi<10 ? ("00" + cvi) : ((cvi>9 && cvi<100) ? ("0" + cvi) : (cvi + ""));
				//log.info(requestId + "CVV ==" + cvv);
				
				TripCard ecard = new TripCard();
				String cardCheckPan = null;
				
				while(cardCheckPan==null)
				{
					pan = UtilityHelper.generatePan(clientCode, cardSchemeCode);
					//log.info(requestId + "Pan ==" + pan);
					hql = "Select tp from TripCard tp where tp.tripCardNumber = '" + pan + "'";
					TripCard cardCheck1 = (TripCard)this.swpService.getUniqueRecordByHQL(hql);
					if(cardCheck1==null)
						cardCheckPan = pan;
				}

				ecard.setBatchId(batchId);
				ecard.setCardScheme(scheme);
				ecard.setCardStatus(CardStatus.INACTIVE);
				ecard.setTripCardNumber(pan);
				ecard.setUniqueId(null);
				ecard.setCreatedAt(new Date());
				ecard.setUpdatedAt(new Date());
				ecard.setCurrentBalance(0.00);
				ecard.setTotalCredited(0.00);
				ecard.setTotalDebited(0.00);
				ecard.setLastCreditDate(null);
				ecard.setLastDebitDate(null);
				ecard.setClient(client);
				ecard.setCardPrice(scheme.getCardPrice());
				ecard.setCurrentAvailableTrips(scheme.getMaxTripCount()==null ? null : scheme.getMaxTripCount());
				ecard.setSerialNo(null);
				ecard = (TripCard)this.swpService.createNewRecord(ecard);
				
				
				
				
				String actorUsername = verifyJ.has("username") ? verifyJ.getString("username") : null;
				AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.NEW_CARD_CREATION, requestId, this.swpService, 
						verifyJ.has("username") ? verifyJ.getString("username") : null, ecard.getTripCardId(), TripCard.class.getName(), 
						"New Card Creation. Card Pan - " + ecard.getTripCardNumber() + " - in batch number - " + ecard.getBatchId() + " created by " + user.getFirstName() + " " + user.getLastName(), clientCode);
				
				if(ecard!=null)
				{
					JSONObject jsObjectCard = new JSONObject();
					jsObjectCard.put("id", ecard.getTripCardId());
					jsObjectCard.put("batchId", ecard.getBatchId());
					jsObjectCard.put("cardScheme", ecard.getCardScheme()==null ? ecard.getCardScheme() : ecard.getCardScheme().getCardSchemeId());
					jsObjectCard.put("cardStatus", ecard.getCardStatus()==null ? ecard.getCardStatus() : ecard.getCardStatus().ordinal());
					jsObjectCard.put("tripCardNumber", ecard.getTripCardNumber());
					jsObjectCard.put("uniqueId", ecard.getUniqueId());
					jsObjectCard.put("createdAt", sdf1.format(ecard.getCreatedAt()));
					jsObjectCard.put("updatedAt", sdf1.format(ecard.getUpdatedAt()));
					jsObjectCard.put("currentBalance", ecard.getCurrentBalance());
					jsObjectCard.put("totalCredited", ecard.getTotalCredited());
					jsObjectCard.put("totalDebited", ecard.getTotalDebited());
					jsObjectCard.put("lastCreditDate", ecard.getLastCreditDate()==null ? null : sdf1.format(ecard.getLastCreditDate()));
					jsObjectCard.put("lastDebitDate", ecard.getLastDebitDate()==null ? null : sdf1.format(ecard.getLastDebitDate()));
					jsObjectCard.put("tripCardNumber", ecard.getTripCardNumber());
					jsObjectCard.put("cardBatchId", batchId);
					jsObjectCard.put("cardStatus", ecard.getCardStatus().name());
					jsObjectCard.put("cardScheme", ecard.getCardScheme().getSchemeName());
					jsObjectCard.put("currentAvailableTrips", scheme.getMaxTripCount()==null ? 0 : scheme.getMaxTripCount());
					cardList.put(jsObjectCard);
				}
				
				
			}
			//log.info("txnObjects 1 ---" + txnObjects.toString());
			
			jsonObject.add("message", "Cards generated successfully");
			jsonObject.add("cardList", cardList.toString());
			jsonObject.add("status", ERROR.GENERAL_SUCCESS);
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
		}
	}
    
    
    

	public Response assignCardToVendor(String vendorCode, String cardPanUniqueMapStr, Double amountCollected, String token, 
			String requestId, String ipAddress, String clientCode)
	{
    	JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
    	
		try{
			if(clientCode==null || vendorCode==null || cardPanUniqueMapStr==null)
			{
				jsonObject.add("status", ERROR.INCOMPLETE_PARAMETERS);
				jsonObject.add("message", "Mandatory fields must be provided");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			
			String username = verifyJ.has("username") ? verifyJ.getString("username") : null;
			//log.info(requestId + "username ==" + (username==null ? "" : username));
			String roleCode_ = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			//log.info(requestId + "roleCode_ ==" + (roleCode_==null ? "" : roleCode_));
			User user = null;
			RoleType roleCode = null;
			
			if(roleCode_ != null)
			{
				roleCode = RoleType.valueOf(roleCode_);
			}
			Vendor vendor = null;
			
			if(username!=null)
			{
				user = (User)this.swpService.getUniqueRecordByHQL("select tp from User tp where tp.username = '" + username + "' AND tp.deletedAt IS NULL AND " +
						"tp.userStatus = " + UserStatus.ACTIVE.ordinal() + " AND tp.client.clientCode = '" + clientCode + "'");
				//roleCode = user.getRoleCode();
				
			}
			if(roleCode==null || (roleCode!=null && !roleCode.equals(RoleType.ADMIN_STAFF)))
			{
				jsonObject.add("status", ERROR.INVALID_CARD_UPDATE_PRIVILEDGES);
				jsonObject.add("message", "Invalid Card Update Priviledges");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			
			String hql = "Select tp from Vendor tp where tp.vendorCode = '"+ vendorCode +"' AND tp.deletedAt IS NULL AND tp.client.clientCode = '"+clientCode+"'";
			vendor = (Vendor)swpService.getUniqueRecordByHQL(hql);

			if(vendor==null)
			{
				jsonObject.add("status", ERROR.VENDOR_NOT_FOUND);
				jsonObject.add("message", "Vendor not found");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			
			hql = "Select tp from Client tp where tp.clientCode = '"+clientCode+"' AND tp.deletedAt IS NULL";
			Client client = (Client)swpService.getUniqueRecordByHQL(hql);
			

			JSONArray cardPanUniqueMapJS = new JSONArray(cardPanUniqueMapStr);
			JSONArray newCardList = new JSONArray();
			Double totalPayable = 0.00;
			for(int i=0; i<cardPanUniqueMapJS.length(); i++)
			{
				JSONObject js = cardPanUniqueMapJS.getJSONObject(i);
				String cardUniqueId = js.getString("cardSerialNo");
				String cardPan = js.getString("cardPan");
				
				hql = "Select tp from TripCard tp where tp.uniqueId = '" + cardUniqueId + "' AND tp.deletedAt IS NULL AND tp.client.clientCode = '"+clientCode+"'" ;
				//log.info("hql ==> " + hql);
				TripCard ecard = (TripCard)swpService.getUniqueRecordByHQL(hql);
				if(ecard==null)
				{
					hql = "Select tp from TripCard tp where tp.tripCardNumber = '" + cardPan + "' AND tp.deletedAt IS NULL AND tp.client.clientCode = '"+clientCode+"'" ;
					//log.info("hql ==> " + hql);
					ecard = (TripCard)swpService.getUniqueRecordByHQL(hql);
					if(ecard!=null)
					{
						totalPayable = totalPayable + ecard.getCardScheme().getVendorCardPrice();
						newCardList.put(js);
					}
				}
			}
			//log.info("amountCollected!=totalPayable >>>" + amountCollected + " && " + totalPayable);
			
			if(!amountCollected.equals(totalPayable))
			{
				jsonObject.add("status", ERROR.AMOUNT_MISMATCH);
				jsonObject.add("message", "Amount collected does not match the amount required to be paid for the selected cards");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			
			
			boolean success = false;
			List assignedList = new ArrayList();
			for(int i=0; i<newCardList.length(); i++)
			{
				JSONObject js = newCardList.getJSONObject(i);
				String cardUniqueId = js.getString("cardSerialNo");
				String cardPan = js.getString("cardPan");
				
				hql = "Select tp from TripCard tp where tp.tripCardNumber = '" + cardPan + "' AND tp.deletedAt IS NULL AND tp.client.clientCode = '"+clientCode+"'" ;
				TripCard ecard = (TripCard)swpService.getUniqueRecordByHQL(hql);
				
				if(ecard!=null)
				{
					ecard.setUniqueId(cardUniqueId);
					ecard.setUpdatedAt(new Date());
					ecard.setAssignedToVendor(vendor);
					try{
						swpService.updateRecord(ecard);
						AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.TRIP_CARD_ASSIGN_TO_VENDOR, requestId, this.swpService, 
								verifyJ.has("username") ? verifyJ.getString("username") : null, ecard.getTripCardId(), TripCard.class.getName(), 
								"Assign Card to Vendor - " + vendor.getCompanyName() + " - | Card Pan: " + ecard.getTripCardNumber() + " | By " + user.getFirstName() + " " + user.getLastName(), clientCode);
						success = true;
						String messageRequest = "CARD_ASSIGN_VENDOR" + "###" + ecard.getUniqueId()+"###"+user.getFirstName()+"###"+user.getLastName()+"###"+ecard.getCardScheme().getVendorCardPrice();
						String narration = "CARD_ASSIGN_VENDOR" + "###" + ecard.getUniqueId()+"###"+user.getFirstName()+"###"+user.getLastName()+"###"+ecard.getCardScheme().getVendorCardPrice();
						Transaction transaction = new Transaction();
						transaction.setCard(ecard);
						transaction.setChannel(Channel.WEB);
						transaction.setClient(client);
						transaction.setCreatedAt(new Date());
						transaction.setFixedCharge(0.00);
						transaction.setMessageRequest(messageRequest);
						transaction.setMessageResponse(null);
						transaction.setNarration(narration);
						transaction.setOrderRef(RandomStringUtils.randomNumeric(10));
						transaction.setPaymentMeans(PaymentMeans.CASH);
						transaction.setResponseCode(200);
						transaction.setServiceType(ServiceType.ASSIGN_CARD_TO_VENDOR);
						transaction.setStatus(TransactionStatus.SUCCESS);
						transaction.setTransactingUser(user);
						transaction.setTransactingUserName(user.getFirstName() + " " + user.getLastName());
						transaction.setTransactionAmount(ecard.getCardScheme().getVendorCardPrice());
						transaction.setTransactionCurrency("ZMW");
						transaction.setTransactionDate(new Date());
						transaction.setTransactionFee(0.00);
						transaction.setTransactionRef(RandomStringUtils.randomNumeric(12));
						transaction.setUpdatedAt(new Date());
						transaction.setUserId(user.getUserId());
						transaction.setVendor(vendor);
						swpService.updateRecord(transaction);
						assignedList.add(ecard);
					}catch(Exception e)
					{
						e.printStackTrace();
					}
				}
			}
			
			if(success==true)
			{
				jsonObject.add("message", "Cards asigned to vendor successfully");
				jsonObject.add("assignedCardList", new Gson().toJson(assignedList));
				jsonObject.add("status", ERROR.GENERAL_SUCCESS);
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
				
			}
			else
			{
				jsonObject.add("message", "Card not found");
				jsonObject.add("status", ERROR.CARD_NOT_VALID);
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
		}
	}
	
	
	
	
	public Response assignCardToCustomer(String customerDetails, Double amountCollected, String clientCode, String cardDetails, String token, String requestId, String ipAddress)
	{
    	JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
    	
		try{
			if(clientCode==null || customerDetails==null || amountCollected==null || cardDetails==null)
			{
				jsonObject.add("status", ERROR.INCOMPLETE_PARAMETERS);
				jsonObject.add("message", "Mandatory fields must be provided");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			
			String username = verifyJ.has("username") ? verifyJ.getString("username") : null;
			//log.info(requestId + "username ==" + (username==null ? "" : username));
			String roleCode_ = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			//log.info(requestId + "roleCode_ ==" + (roleCode_==null ? "" : roleCode_));
			User user = null;
			RoleType roleCode = null;
			
			if(roleCode_ != null)
			{
				roleCode = RoleType.valueOf(roleCode_);
			}
			Vendor vendor = null;
			
			if(username!=null)
			{
				user = (User)this.swpService.getUniqueRecordByHQL("select tp from User tp where tp.username = '" + username + "' AND tp.deletedAt IS NULL AND " +
						"tp.userStatus = " + UserStatus.ACTIVE.ordinal() + " AND tp.client.clientCode = '" + clientCode + "'");
				//roleCode = user.getRoleCode();
				if(roleCode.equals(RoleType.VENDOR))
					vendor = user.getVendor();
			}
			
			if(roleCode==null || (roleCode!=null && (!roleCode.equals(RoleType.OPERATOR) && !roleCode.equals(RoleType.VENDOR) && !roleCode.equals(RoleType.ADMIN_STAFF))))
			{
				jsonObject.add("status", ERROR.INVALID_CARD_UPDATE_PRIVILEDGES);
				jsonObject.add("message", "Invalid Card Update Priviledges");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			
			String hql = "Select tp from Client tp where tp.clientCode = '"+clientCode+"' AND tp.deletedAt IS NULL";
			Client client = (Client)swpService.getUniqueRecordByHQL(hql);
			
			boolean success = false;
			List js_returnedCards = new ArrayList();
			JSONArray jsArr = new JSONArray(cardDetails);
			
			JSONObject entry = new JSONObject(customerDetails);
			String firstName = entry.has("firstName") ? entry.getString("firstName") : null;
			//log.info("1hql ----> " + firstName);
			String lastName = entry.has("lastName") ? entry.getString("lastName") : null;
			//log.info("1hql ----> " + lastName);
			String otherName = entry.has("otherName") ? entry.getString("otherName") : null;
			//log.info("1hql ----> " + otherName);
			String mobileNumber = entry.has("mobileNumber") ? entry.getString("mobileNumber") : null;
			//log.info("1hql ----> " + mobileNumber);
			String emailAddress = entry.has("emailAddress") ? entry.getString("emailAddress") : null;
			//log.info("1hql ----> " + emailAddress);
			String meansOfId = entry.has("meansOfId") ? entry.getString("meansOfId") : null;
			//log.info("1hql ----> " + meansOfId);
			
			Customer customer = null; 
			String username_ = null;
			String password_ = null;
			if(firstName!=null && lastName!=null && mobileNumber!=null)
			{
				hql = "Select tp from User tp where tp.mobileNumber = '"+mobileNumber+"' AND tp.deletedAt IS NULL " +
						"AND tp.client.clientCode = '"+ clientCode +"'";
				User customerUser = (User)swpService.getUniqueRecordByHQL(hql);
				if(customerUser!=null)
				{
					hql = "Select tp from Customer tp where tp.user.id = " + customerUser.getUserId();
					customer = (Customer)swpService.getUniqueRecordByHQL(hql);
				}
				else
				{
					String str = (String)(Authenticator.getInstance().addNewUser(null, token, mobileNumber, emailAddress, 
							mobileNumber, UserStatus.ACTIVE.name(), null, 
							Boolean.FALSE, null, clientCode, firstName, lastName, otherName, 
							RoleType.CUSTOMER.name(), null, requestId, ipAddress).getEntity());
					JSONObject js = new JSONObject(str);
					if(js!=null && js.has("status") && js.getInt("status")==0)
					{
						String userStr = js.getString("userAccount");
						username_ = js.getString("username");
						password_ = js.getString("password");
						//log.info("userStr --- " + userStr);
						customerUser = new Gson().fromJson(userStr, User.class);
					}
					else
					{
						jsonObject.add("message", "We encountered a system error setting up an account for the customer. Please try again");
						jsonObject.add("status", ERROR.CARD_ASSIGN_FAIL_NO_CUSTOMER);
						JsonObject jsonObj = jsonObject.build();
			            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
					}
					customer = new Customer();
					customer.setFirstName(firstName);
					customer.setLastName(lastName);
					customer.setOtherName(otherName);
					customer.setMobileNumber(mobileNumber);
					customer.setEmailAddress(emailAddress);
					customer.setMeansOfId(meansOfId);
					customer.setCreatedAt(new Date());
					customer.setUpdatedAt(new Date());
					customer.setVerificationNumber(RandomStringUtils.randomNumeric(12));
					customer.setUser(customerUser);
					customer.setClient(client);
					customer = (Customer)swpService.createNewRecord(customer);
				}
				
			}
			
			
			if(customer==null)
			{
				jsonObject.add("message", "Customer details not completely provided");
				jsonObject.add("status", ERROR.CARD_ASSIGN_FAIL_NO_CUSTOMER);
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			
			//log.info("jsArr.length() == " + jsArr.length());
			for(int i=0; i<jsArr.length(); i++)
			{
				JSONObject js = jsArr.getJSONObject(i);
				String cardUniqueId = js.getString("cardUniqueId");
				String cardPan = js.getString("cardPan");
				hql = "Select tp from TripCard tp where tp.uniqueId = '" + cardUniqueId + "' AND tp.deletedAt IS NULL AND tp.client.clientCode = '"+clientCode+"'" ;
				//log.info("hql ----> " + hql);
				TripCard ecard = (TripCard)swpService.getUniqueRecordByHQL(hql);
				if(ecard!=null && ecard.getCardStatus().equals(CardStatus.INACTIVE))
				{
					hql = "Select tp from TripCard tp where tp.tripCardNumber = '" + cardPan + "' AND tp.deletedAt IS NULL AND tp.client.clientCode = '"+clientCode+"'" ;
					//log.info("hql ----> " + hql);
					ecard = (TripCard)swpService.getUniqueRecordByHQL(hql);
					if(ecard!=null)
					{
						String messageRequest = "CARD_ASSIGN_CUSTOMER" + "###" + ecard.getUniqueId()+"###"+user.getFirstName()+"###"+user.getLastName()+"###"+ecard.getCardScheme().getCardPrice();
						String narration = "CARD_ASSIGN_CUSTOMER" + "###" + ecard.getUniqueId()+"###"+user.getFirstName()+"###"+user.getLastName()+"###"+ecard.getCardScheme().getCardPrice();
						Transaction transaction = new Transaction();
						transaction.setCard(ecard);
						transaction.setChannel(Channel.WEB);
						transaction.setClient(client);
						transaction.setCreatedAt(new Date());
						transaction.setFixedCharge(0.00);
						transaction.setMessageRequest(messageRequest);
						transaction.setMessageResponse(null);
						transaction.setNarration(narration);
						transaction.setOrderRef(RandomStringUtils.randomNumeric(10));
						transaction.setPaymentMeans(PaymentMeans.CASH);
						transaction.setResponseCode(200);
						transaction.setServiceType(ServiceType.ASSIGN_CARD_TO_CUSTOMER);
						transaction.setStatus(TransactionStatus.SUCCESS);
						transaction.setTransactingUser(user);
						transaction.setTransactingUserName(user.getFirstName() + " " + user.getLastName());
						transaction.setTransactionAmount(ecard.getCardScheme().getCardPrice());
						transaction.setTransactionCurrency("ZMW");
						transaction.setTransactionDate(new Date());
						transaction.setTransactionFee(0.00);
						transaction.setTransactionRef(RandomStringUtils.randomNumeric(12));
						transaction.setUpdatedAt(new Date());
						transaction.setUserId(user.getUserId());
						transaction.setVendor(vendor);
						swpService.updateRecord(transaction);
						
						ecard.setCustomer(customer);
						ecard.setUniqueId(cardUniqueId);
						ecard.setCardStatus(CardStatus.ACTIVE);
						ecard.setUpdatedAt(new Date());
						swpService.updateRecord(ecard);
						
						if(entry.has("cardMobileNumber"))
						{
							String message = "Hello, Trip card "+ ecard.getTripCardNumber().substring(0,  3) + "*****" + ecard.getTripCardNumber().substring(8) +" has been successfully updated.";
						}
	
						AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.TRIP_CARD_ASSIGN_TO_CUSTOMER, requestId, this.swpService, 
								verifyJ.has("username") ? verifyJ.getString("username") : null, ecard.getTripCardId(), TripCard.class.getName(), 
								"Card assignment to customer - " + customer.getFirstName() + " " + customer.getLastName() + " -  | Card Pan: " + ecard.getTripCardNumber() + " - | Transaction Ref: " + transaction.getTransactionRef() + " - by " + user.getFirstName() + " " + user.getLastName(), clientCode);
						success = true;
						js_returnedCards.add(ecard);
					}
				}
			}
			
			if(success == true)
			{
				jsonObject.add("message", "Card asigned successfully");
				jsonObject.add("cardList", new Gson().toJson(js_returnedCards));
				jsonObject.add("customer", new Gson().toJson(customer));
				jsonObject.add("access_username", username_);
				jsonObject.add("access_password", password_);
				jsonObject.add("status", ERROR.GENERAL_SUCCESS);
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			else
			{
				jsonObject.add("message", "Card could not be assigned to the customer successfully");
				jsonObject.add("status", ERROR.GENERAL_FAIL);
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
		}
	}
	
	
    
    

    public Response getCardList( String cardSchemeCode, String batchId, String token, Boolean assignedToCustomer, 
    		String clientCode, String requestId, String ipAddress, String cardType )
    {
    	
    	
    	JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
		try{
			if(clientCode==null)
			{
				jsonObject.add("status", ERROR.INCOMPLETE_PARAMETERS);
				jsonObject.add("message", "Mandatory fields must be provided");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			
			
			TripCardType tct = null;
			try
			{
				tct = TripCardType.valueOf(cardType);
			}
			catch(IllegalArgumentException | NullPointerException e)
			{
				jsonObject.add("status", ERROR.INCOMPLETE_PARAMETERS);
				jsonObject.add("message", "Trip Card Type Specified Is Not Valid");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			
			String username = verifyJ.has("username") ? verifyJ.getString("username") : null;
			//log.info(requestId + "username ==" + (username==null ? "" : username));
			String roleCode_ = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			//log.info(requestId + "roleCode_ ==" + (roleCode_==null ? "" : roleCode_));
			User user = null;
			RoleType roleCode = null;
			
			if(roleCode_ != null)
			{
				roleCode = RoleType.valueOf(roleCode_);
			}
			Vendor vendor = null;
			
			if(username!=null)
			{
				String hql = "select tp from User tp where tp.username = '" + username + "' AND tp.deletedAt IS NULL AND " +
						"tp.userStatus = " + UserStatus.ACTIVE.ordinal() + " AND tp.client.clientCode = '"+clientCode+"'";
				//log.info("hql --- " + hql);
				user = (User)this.swpService.getUniqueRecordByHQL(hql);
				if(user!=null)
				{
					//roleCode = user.getRoleCode();
					//log.info("1. hql --- " + roleCode.name());
					vendor = user.getVendor();
				}
			}
			
			if(roleCode==null || (roleCode!=null && (!roleCode.equals(RoleType.CUSTOMER) && !roleCode.equals(RoleType.ADMIN_STAFF) && !roleCode.equals(RoleType.VENDOR))))
			{
				jsonObject.add("status", ERROR.INVALID_CARD_SCHEME_CREATION_PRIVILEDGES);
				jsonObject.add("message", "Invalid Card Access Priviledges");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			
			
			
			String hql = "Select distinct tp from TripCard tp where tp.client.clientCode = '" + clientCode + "' ";
			if(tct!=null)
				hql = hql + "AND tp.cardScheme.tripCardType = "+tct.ordinal();
			//log.info(requestId + "3.hql ==" + hql);
			if(batchId!=null)
				hql = hql + "AND tp.batchId = '"+batchId+"' ";

			//log.info(requestId + "3.hql ==" + hql);
			if(cardSchemeCode!=null)
				hql = hql + "AND tp.cardScheme.schemeCode = '"+cardSchemeCode+"' ";

			//log.info(requestId + "3.hql ==" + hql);
			if(assignedToCustomer!=null)
			{
				if(assignedToCustomer.equals(Boolean.TRUE))
					hql = hql + "AND tp.customer IS NOT NULL ";
				else
					hql = hql + "AND tp.customer IS NULL ";
			}
			//log.info(requestId + "3.hql ==" + hql);
			
			if(roleCode!=null && roleCode.equals(RoleType.CUSTOMER))
			{
				hql = hql + " AND tp.customer.user.userId = " + user.getUserId();
			}
			
			
			if(roleCode!=null && (roleCode.equals(RoleType.VENDOR)))
			{
				hql = hql + " AND tp.assignedToVendor.vendorId = " + vendor.getVendorId();
			}
			else
			{
				if(roleCode!=null && (!roleCode.equals(RoleType.ADMIN_STAFF)))
				{
					hql = hql + " AND tp.cardStatus = " + CardStatus.ACTIVE.ordinal();
				}
			}
			
			hql = hql + " ORDER BY tp.createdAt DESC " ;
			//log.info(requestId + "3.hql ==" + hql);
			Collection<TripCard> ecards = (Collection<TripCard>)swpService.getAllRecordsByHQL(hql);
			
			CardScheme cardScheme = null;
			if(cardSchemeCode!=null)
			{
				hql = "Select tp from CardScheme tp where tp.schemeCode = '"+cardSchemeCode+"' AND tp.client.clientCode = '"+clientCode+"'";
				cardScheme = (CardScheme)swpService.getUniqueRecordByHQL(hql);
			}
			
			
			jsonObject.add("message", "Card Listing");
			if(cardScheme!=null)
				jsonObject.add("cardScheme", new Gson().toJson(cardScheme));
			
			jsonObject.add("cardList", new Gson().toJson(ecards));
			jsonObject.add("status", ERROR.GENERAL_SUCCESS);
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
		}
    }
    
    
    
    public Response getListCardsByBatchIdWithNoUniqueId( String batchId, Integer startIndex, Integer limit, String token, String requestId, String ipAddress, String clientCode )
    {
    	JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
		try{
			if(batchId==null || startIndex==null)
			{
				jsonObject.add("status", ERROR.INCOMPLETE_PARAMETERS);
				jsonObject.add("message", "Mandatory fields must be provided");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			
			
			String hql = "Select distinct tp from TripCard tp where tp.deletedAt IS NULL AND tp.client.clientCode = '"+clientCode+"' " +
					"AND tp.batchId = '" + batchId + "' AND uniqueId IS NULL ORDER BY (tp.created_at) DESC" ;
			//log.info(requestId + "3.hql ==" + hql);
			Collection<TripCard> ecards = (Collection<TripCard>)swpService.getAllRecordsByHQL(hql, startIndex, limit);
			
			
			String hql1 = "Select distinct count(tp.id) as idCount from TripCard tp where tp.deletedAt IS NULL AND tp.client.clientCode = '"+clientCode+"' " +
					"AND tp.batchId = '" + batchId + "' AND uniqueId IS NULL";
			//log.info(requestId + "4.hql ==" + hql1);
			List<Long> totalEcardCount = (List<Long>)swpService.getAllRecordsByHQL(hql1);
			Long totalCards = totalEcardCount!=null ? totalEcardCount.iterator().next() : 0;
			//log.info(requestId + "totalEcardCount ==" + totalCards);
			
			Iterator<TripCard> iterator = ecards.iterator();
			
			JSONArray ecardList = new JSONArray();
			while(iterator.hasNext())
			{
				TripCard ecard = iterator.next();
				
				JSONObject jsObjectCard = new JSONObject();
				jsObjectCard.put("cardPan", ecard.getTripCardNumber());
				jsObjectCard.put("status", ecard.getCardStatus().name());
				ecardList.put(jsObjectCard);
				
				
			}
			
			jsonObject.add("message", "Card Listing from Index " + startIndex + " to Index " + (startIndex+limit));
			jsonObject.add("cardList", ecardList.toString());
			jsonObject.add("totalCards", totalCards);
			jsonObject.add("status", ERROR.GENERAL_SUCCESS);
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
		}
    }

	
    
    
    
    
    public Response getCardBatchIds( String token, String requestId, String ipAddress, String clientCode )
    {
    	JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
		try{
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			//log.info(requestId + "roleCode ==" + (roleCode==null ? "" : roleCode));
			
			if(roleCode==null || (roleCode!=null && !roleCode.equals(RoleType.ADMIN_STAFF.name())))
			{
				jsonObject.add("status", ERROR.INSUFFICIENT_CARD_BATCH_CREATION_PRIVILEDGES);
				jsonObject.add("message", "Insufficient Card Batch Creation Priviledges");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			
			
			String hql = "Select tp.batchId from TripCard tp where tp.deletedAt IS NULL AND tp.client.clientCode = '"+clientCode+"' GROUP BY tp.batchId" ;
			//log.info(requestId + "3.hql ==" + hql);
			List<String> batchIds = (List<String>)swpService.getAllRecordsByHQL(hql);
			
			
			Iterator<String> iterator = batchIds.iterator();


			int j=0;
			JSONObject jsObjectCard = new JSONObject();
			while(iterator.hasNext())
			{
				String batchId = iterator.next();
				
				
				jsObjectCard.put(j++ + "", batchId);
			}
			
			jsonObject.add("message", "Batch Id Listing");
			jsonObject.add("batchIds", jsObjectCard.toString());
			jsonObject.add("status", ERROR.GENERAL_SUCCESS);
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
		}
    }

	
    
    
    
    
    public Response addNewCardScheme(
    		String schemeName, 
    		String schemeDetails,
    		Integer lowerAgeBoundary, 
    		Integer upperAgeBoundary, 
        	Boolean dayMondayApplicable,
        	Boolean dayTuesdayApplicable, 
        	Boolean dayWednesdayApplicable, 
        	Boolean dayThursdayApplicable, 
        	Boolean dayFridayApplicable, 
        	Boolean daySaturdayApplicable,
        	Boolean daySundayApplicable, 
        	Boolean updateFlag, 
        	String schemeCode, 
        	Date expiryDate,
        	Integer maxTripCount,
        	Double transactionCharge,
        	Double fixedCharge,
        	Double vendorCardPrice,
        	Double cardPrice,
        	Double yearlyPrice,
        	Integer validityPeriod,
        	String tripChargeMode,
        	Double discountRate,
        	Boolean openToVendor,
        	String tripCardType,
        	String clientCode,
        	String token, 
        	String requestId, 
        	String ipAddress) {
		// TODO Auto-generated method stub
    	JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
    	//log.info(">> " + dayMondayApplicable);
    	//log.info(">> " + dayTuesdayApplicable); 
    	//log.info(">> " + dayWednesdayApplicable); 
    	//log.info(">> " + dayThursdayApplicable); 
    	//log.info(">> " + dayFridayApplicable); 
    	//log.info(">> " + daySaturdayApplicable);
    	//log.info(">> " + daySundayApplicable); 
    	//log.info(">> " + updateFlag); 
    	
		try{

			if((expiryDate==null && validityPeriod==null) || (expiryDate!=null && validityPeriod!=null))
			{
				jsonObject.add("status", ERROR.INCOMPLETE_PARAMETERS);
				jsonObject.add("message", "Expiry date OR validity period were not provided. You must provide at least one");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			
			
			if((updateFlag!=null && updateFlag.equals(Boolean.TRUE) && schemeCode==null))
			{
				jsonObject.add("status", ERROR.INCOMPLETE_PARAMETERS);
				jsonObject.add("message", "Incomplete Parameters provided in request.");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			else
			{
				if(updateFlag==null && schemeName==null)
				{
					jsonObject.add("status", ERROR.INCOMPLETE_PARAMETERS);
					jsonObject.add("message", "Incomplete Parameters provided in request.");
					JsonObject jsonObj = jsonObject.build();
		            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
				}
			}
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			
			CardScheme cardScheme = new CardScheme();
			if(updateFlag!=null && updateFlag.equals(Boolean.FALSE))
			{
				//Creation of card Scheme
				//log.info(requestId + "---> updateflag is false");
				String hql = "Select tp from CardScheme tp where lower(tp.schemeName) = '" + schemeName.toLowerCase() + "' AND tp.deletedAt IS NULL AND tp.client.clientCode = '"+clientCode+"'";
				CardScheme cardScheme1 = (CardScheme)this.swpService.getUniqueRecordByHQL(hql);
				if(cardScheme1!=null)
				{
					jsonObject.add("status", ERROR.CARD_SCHEME_ALREADY_EXISTS);
					jsonObject.add("message", "Card Scheme Creation Failed. Card Scheme Already Exists");
					JsonObject jsonObj = jsonObject.build();
		            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
				}
			}
			else if(updateFlag!=null && updateFlag.equals(Boolean.TRUE))
			{
				//log.info(requestId + "---> updateflag is true");
				String hql = "Select tp from CardScheme tp where lower(tp.schemeCode) = '" + schemeCode.toLowerCase() + "' AND tp.deletedAt IS NULL AND tp.client.clientCode = '"+clientCode+"'";
				cardScheme = (CardScheme)this.swpService.getUniqueRecordByHQL(hql);
				if(cardScheme==null)
				{
					jsonObject.add("status", ERROR.CARD_SCHEME_NOT_EXISTING);
					jsonObject.add("message", "Card Scheme Update Failed. Card Scheme Could Not Be Found");
					JsonObject jsonObj = jsonObject.build();
		            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
				}
			}
			
			String username = verifyJ.has("username") ? verifyJ.getString("username") : null;
			//log.info(requestId + "username ==" + (username==null ? "" : username));
			String roleCode_ = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			//log.info(requestId + "roleCode_ ==" + (roleCode_==null ? "" : roleCode_));
			User user = null;
			RoleType roleCode = null;
			
			if(roleCode_ != null)
			{
				roleCode = RoleType.valueOf(roleCode_);
			}
			
			if(username!=null)
			{
				user = (User)this.swpService.getUniqueRecordByHQL("select tp from User tp where tp.username = '" + username + "' AND tp.deletedAt IS NULL AND " +
						"tp.userStatus = " + UserStatus.ACTIVE.ordinal() + " AND tp.client.clientCode = '"+clientCode+"'");
				//roleCode = user.getRoleCode();
			}
			if(roleCode==null || (roleCode!=null && !roleCode.equals(RoleType.ADMIN_STAFF)))
			{
				jsonObject.add("status", ERROR.INVALID_CARD_SCHEME_CREATION_PRIVILEDGES);
				jsonObject.add("message", "Invalid Card Scheme Creation Priviledges");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			
			Client client=null;
			if(clientCode!=null)
			{
				client = (Client)this.swpService.getUniqueRecordByHQL("Select tp from Client tp where tp.clientCode = '"+ clientCode + "' AND tp.deletedAt IS NULL");
				if(client==null)
				{
					jsonObject.add("status", ERROR.INCOMPLETE_PARAMETERS);
					jsonObject.add("message", "The clientCode is invalid");
					JsonObject jsonObj = jsonObject.build();
		            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
				}
			}
			
			TripCardType tct = null;
			try
			{
				tct = TripCardType.valueOf(tripCardType);
			}
			catch(IllegalArgumentException | NullPointerException e)
			{
				jsonObject.add("status", ERROR.INCOMPLETE_PARAMETERS);
				jsonObject.add("message", "Trip Card Type Specified Is Not Valid");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			
			cardScheme.setCardSchemeStatus(Boolean.TRUE);
			cardScheme.setDayFridayApplicable(dayFridayApplicable);
			cardScheme.setDayMondayApplicable(dayMondayApplicable);
			cardScheme.setDaySaturdayApplicable(daySaturdayApplicable);
			cardScheme.setDaySundayApplicable(daySundayApplicable);
			cardScheme.setDayThursdayApplicable(dayThursdayApplicable);
			cardScheme.setDayTuesdayApplicable(dayTuesdayApplicable);
			cardScheme.setDayWednesdayApplicable(dayWednesdayApplicable);
			cardScheme.setExpiryDate(expiryDate);
			cardScheme.setLowerAgeBoundary(lowerAgeBoundary);
			cardScheme.setMaxTripCount(maxTripCount);
			cardScheme.setSchemeCode(schemeCode);
			cardScheme.setSchemeDetail(schemeDetails);
			cardScheme.setSchemeName(schemeName);
			cardScheme.setUpperAgeBoundary(upperAgeBoundary);
			cardScheme.setSchemeName(schemeName);
			cardScheme.setTransactionCharge(transactionCharge);
			cardScheme.setFixedCharge(fixedCharge);
			cardScheme.setValidityPeriod(validityPeriod);
			cardScheme.setYearlyPrice(yearlyPrice);
			cardScheme.setCardPrice(cardPrice);
			cardScheme.setVendorCardPrice(vendorCardPrice);
			cardScheme.setClient(client);
			cardScheme.setOpenToVendor(openToVendor);
			cardScheme.setTripCardType(tct);
			cardScheme.setTripCardChargeMode(TripCardChargeMode.valueOf(tripChargeMode));
			cardScheme.setDiscountRate(discountRate);
			
			
			if(updateFlag==null || (updateFlag!=null && updateFlag.equals(Boolean.TRUE)))
			{
				cardScheme.setUpdatedAt(new Date());
				this.swpService.updateRecord(cardScheme);
				
				AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.CARD_SCHEME_UPDATE, requestId, this.swpService, 
						verifyJ.has("username") ? verifyJ.getString("username") : null, cardScheme.getCardSchemeId(), CardScheme.class.getName(), 
						"Update card scheme - " + cardScheme.getSchemeName() + " " + cardScheme.getSchemeCode() + " - by " + user.getFirstName() + " " + user.getLastName(), clientCode);
				
				jsonObject.add("message", "Card Scheme updated successfully");
			}
			else
			{
				cardScheme.setCreatedAt(new Date());
				cardScheme.setUpdatedAt(new Date());
				schemeCode = RandomStringUtils.random(4, false, true).toUpperCase();
				cardScheme.setSchemeCode(schemeCode);
				cardScheme.setCardSchemeStatus(Boolean.TRUE);
				cardScheme = (CardScheme)this.swpService.createNewRecord(cardScheme);
				
				
				JSONObject js = new JSONObject();
				JSONObject txnObjects = new JSONObject();
				int a =0;
				
				
				AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.NEW_CARD_SCHEME_CREATION, requestId, this.swpService, 
						verifyJ.has("username") ? verifyJ.getString("username") : null, cardScheme.getCardSchemeId(), CardScheme.class.getName(), 
						"New card scheme - " + cardScheme.getSchemeName() + " " + cardScheme.getSchemeCode() + " - by " + user.getFirstName() + " " + user.getLastName(), clientCode);
				
				jsonObject.add("message", "Card Scheme generated successfully");
			}
			
			
			
			
			jsonObject.add("scheme", new Gson().toJson(cardScheme));
			jsonObject.add("status", ERROR.GENERAL_SUCCESS);
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
		}
	}
    
    
    
    public Response getCardScheme(String clientCode, String schemeCode) {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
    	
		try{
			
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			String hql = "Select tp from CardScheme tp WHERE tp.deletedAt is NULL AND tp.client.clientCode = '"+clientCode+"' AND tp.schemeCode = '"+schemeCode+"'";
			//log.info("hql ==" + hql);
			CardScheme cardScheme = (CardScheme)this.swpService.getUniqueRecordByHQL(hql);
			if(cardScheme==null)
			{
				jsonObject.add("status", ERROR.NO_CARD_SCHEMES_EXIST);
				jsonObject.add("message", "No Card Scheme matching scheme code Available");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			
			jsonObject.add("message", "Card Schemes Listed");
			jsonObject.add("cardSchme", new Gson().toJson(cardScheme));
			jsonObject.add("status", ERROR.GENERAL_SUCCESS);
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
		}
	}
    
    

	public Response getCardSchemes(String clientCode, String cardType) {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
    	
		try{
			
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			
			TripCardType ct = null;
			try
			{
				ct = TripCardType.valueOf(cardType);
			}
			catch(IllegalArgumentException | NullPointerException e)
			{
				jsonObject.add("status", ERROR.TRIP_CARD_TYPE_INVALID);
				jsonObject.add("message", "Invalid trip card type specified");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			String hql = "Select tp from CardScheme tp WHERE tp.deletedAt is NULL AND tp.client.clientCode = '"+clientCode+"' AND tp.tripCardType = " + ct.ordinal();
			//log.info("hql ==" + hql);
			Collection<CardScheme> cardSchemes = (Collection<CardScheme>)this.swpService.getAllRecordsByHQL(hql);
			if(cardSchemes==null)
			{
				jsonObject.add("status", ERROR.NO_CARD_SCHEMES_EXIST);
				jsonObject.add("message", "No Card Schemes Available");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			
			jsonObject.add("message", "Card Schemes Listed");
			jsonObject.add("cardSchmesList", new Gson().toJson(cardSchemes));
			jsonObject.add("status", ERROR.GENERAL_SUCCESS);
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
		}
	}

	public Response getCard(String cardPan, String cardUniqueId, String token, String requestId, String ipAddress, String clientCode) {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
    	
		try{
			
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			
			if(cardPan==null || cardUniqueId==null)
			{
				jsonObject.add("status", ERROR.INCOMPLETE_PARAMETERS);
				jsonObject.add("message", "Incomplete Parameters provided in request.");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			
			String hql = "Select tp from TripCard tp WHERE tp.tripCardNumber = '"+cardPan+"' AND tp.uniqueId = '"+cardUniqueId+"' AND tp.deletedAt IS NULL AND tp.client.clientCode = '"+clientCode+"'";
			TripCard card = (TripCard)this.swpService.getUniqueRecordByHQL(hql);
			if(card==null)
			{
				jsonObject.add("status", ERROR.TRIP_CARD_NOT_EXIST);
				jsonObject.add("message", "Card does not exist");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			
			
			
			jsonObject.add("message", "Card Found");
			jsonObject.add("cardDetail", new Gson().toJson(card));
			jsonObject.add("status", ERROR.GENERAL_SUCCESS);
			JsonObject jsonObj = jsonObject.build();
			//log.info(requestId + " -- " + jsonObj.toString());
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(requestId + e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
		}
	}


	
	
	
	public Response getCardCountByStatus(String cardStatus, String requestId, String ipAddress, String clientCode) {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
    	
		try{
			
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			
			String hql = "Select count(tp.id) from TripCard tp where tp.cardStatus = '" + CardStatus.valueOf(cardStatus).name() + "' WHERE tp.deletedAt IS NULL AND tp.client.clientCode = '"+clientCode+"'";
			//log.info(requestId + "4.hql ==" + hql);
			List<Long> totalEcardCount = (List<Long>)swpService.getAllRecordsByHQL(hql);
			Long totalCards = totalEcardCount!=null ? totalEcardCount.iterator().next() : 0;
			//log.info(requestId + "totalEcardCount ==" + totalCards);

			if(totalEcardCount==null)
			{
				jsonObject.add("status", ERROR.NO_CARDS_AVAILABLE);
				jsonObject.add("message", "No Cards Matching Card Status Provided Available");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			
			
			jsonObject.add("message", "Card Count For Cards Matching Status");
			jsonObject.add("cardCount", totalCards);
			jsonObject.add("status", ERROR.GENERAL_SUCCESS);
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
		}
	}

	public Response fundCard(String tripCardNumber, String tripCardUniqueId, String channel, String probasePayMerchantCode, String probasePayDeviceCode, 
			String paymentMeans, String transactionRef, String hash, Double amountToFund, 
			String deviceCode, String token, String requestId, String ipAddress, String clientCode) {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
    	
    	//log.info(">> " + tripCardNumber);
    	//log.info(">> " + tripCardUniqueId); 
    	//log.info(">> " + amountToFund); 
    	//log.info(">> " + channel); 
    	//log.info(">> " + probasePayMerchantCode); 
    	//log.info(">> " + probasePayDeviceCode); 
    	//log.info(">> " + paymentMeans); 
    	//log.info(">> " + transactionRef); 
    	//log.info(">> " + hash); 
    	//log.info(">> " + deviceCode); 
    	//log.info(">> " + clientCode); 
    	
		try{
			
			if(tripCardNumber==null || tripCardUniqueId==null || amountToFund==null || clientCode==null || channel==null)
			{
				jsonObject.add("status", ERROR.INCOMPLETE_PARAMETERS);
				jsonObject.add("message", "Incomplete Parameters provided in request.");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			swpService = serviceLocator.getSwpService();
			Application app = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, app);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			

			Client client=null;
			if(clientCode!=null)
			{
				client = (Client)this.swpService.getUniqueRecordByHQL("Select tp from Client tp where tp.clientCode = '"+ clientCode + "' AND tp.deletedAt IS NULL");
				if(client==null)
				{
					jsonObject.add("status", ERROR.INCOMPLETE_PARAMETERS);
					jsonObject.add("message", "The clientCode is invalid");
					JsonObject jsonObj = jsonObject.build();
		            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
				}
			}
			
			Device device=null;
			if(deviceCode!=null)
			{
				device = (Device)this.swpService.getUniqueRecordByHQL("Select tp from Device tp where tp.deviceCode = '"+ deviceCode +"' AND " +
						"tp.client.clientId = '"+ client.getClientId() + "' AND tp.deletedAt IS NULL AND tp.status = " + DeviceStatus.ACTIVE.ordinal());
				if(device==null)
				{
					jsonObject.add("status", ERROR.DEVICE_NOT_FOUND);
					jsonObject.add("message", "The deviceCode is invalid");
					JsonObject jsonObj = jsonObject.build();
		            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
				}
			}
			
			TripCard tripCard = null;
			String hql = "Select tp from TripCard tp where lower(tp.tripCardNumber) = '" + tripCardNumber + "' " +
					"AND tp.uniqueId = '"+ tripCardUniqueId +"' AND tp.deletedAt IS NULL AND tp.client.clientCode = '"+clientCode+"'";
			//log.info("hql = " + hql);
			tripCard = (TripCard)this.swpService.getUniqueRecordByHQL(hql);
			if(tripCard==null)
			{
				jsonObject.add("status", ERROR.CARD_NOT_VALID);
				jsonObject.add("message", "Card not found");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			
			if(paymentMeans!=null && paymentMeans.equals(PaymentMeans.PROBASEPAY))
			{
				if(probasePayDeviceCode==null || probasePayMerchantCode==null || transactionRef==null)
				{
					jsonObject.add("status", ERROR.INCOMPLETE_PARAMETERS);
					jsonObject.add("message", "Incomplete parameters. Provide the payment transaction ref, payment platforms merchant code and device code");
					JsonObject jsonObj = jsonObject.build();
		            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
				}
			}
			
			String username = verifyJ.has("username") ? verifyJ.getString("username") : null;
			//log.info(requestId + "username ==" + (username==null ? "" : username));
			String roleCode_ = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			//log.info(requestId + "roleCode_ ==" + (roleCode_==null ? "" : roleCode_));
			User user = null;
			RoleType roleCode = null;
			
			if(roleCode_ != null)
			{
				roleCode = RoleType.valueOf(roleCode_);
			}
			Vendor vendor = null;
			Wallet wallet = null;
			if(username!=null)
			{
				user = (User)this.swpService.getUniqueRecordByHQL("select tp from User tp where tp.username = '" + username + "' AND tp.deletedAt IS NULL AND " +
						"tp.userStatus = " + UserStatus.ACTIVE.ordinal() + " AND tp.client.clientCode = '"+clientCode+"'");
				//roleCode = user.getRoleCode();
				vendor = user.getVendor();
				if(vendor!=null)
				{
					hql = "Select tp from Wallet tp where tp.vendor.vendorId = " + vendor.getVendorId() + " AND tp.deletedAt IS NULL";
					wallet = (Wallet)swpService.getUniqueRecordByHQL(hql);
					if(wallet==null)
					{
						jsonObject.add("status", ERROR.INSUFFICIENT_FUNDS_IN_WALLET);
						jsonObject.add("message", "Insufficient funds in your wallet");
						JsonObject jsonObj = jsonObject.build();
			            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
					}
				}
			}
			

			Date subscriptionExpiryDate = null;
			Date today = new Date();
			Calendar calendar = Calendar.getInstance();
			
			
			if(tripCard.getCardScheme().getTripCardChargeMode().equals(TripCardChargeMode.PER_TRIP))
			{
				if(tripCard.getSubsciptionExpiryDate()!=null && calendar.getTime().before(tripCard.getSubsciptionExpiryDate()))
				{
					jsonObject.add("status", ERROR.CARD_STILL_VALID_CANT_RENEW);
					jsonObject.add("message", "The trip cards subscription is still valid. You can not renew the subscription for this card until its subscription period runs out");
					JsonObject jsonObj = jsonObject.build();
		            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
				}
				
				if(roleCode.equals(RoleType.OPERATOR))
				{
					String messageRequest = "FUND_CARD_BY_OPERATOR" + "###" + tripCard.getUniqueId()+"###"+user.getFirstName()+"###"+user.getLastName()+"###"+tripCard.getCardScheme().getYearlyPrice();
					String narration = "FUND_CARD_BY_OPERATOR" + "###" + tripCard.getUniqueId()+"###"+user.getFirstName()+"###"+user.getLastName()+"###"+tripCard.getCardScheme().getYearlyPrice();
					String messageResponse = null;
					Transaction transaction = new Transaction();
					transaction.setCard(tripCard);
					transaction.setChannel(Channel.valueOf(channel));
					transaction.setCrCardId(tripCard.getTripCardId());
					transaction.setCrCardPan(tripCard.getTripCardNumber());
					transaction.setCreatedAt(new Date());
					transaction.setFixedCharge(0.00);
					transaction.setMessageRequest(messageRequest);
					transaction.setMessageResponse(messageResponse);
					transaction.setNarration(narration);
					transaction.setOrderRef(RandomStringUtils.randomNumeric(10));
					transaction.setPaymentMeans(PaymentMeans.CASH);
					transaction.setRebateAmount(0.00);
					transaction.setResponseCode(200);
					transaction.setServiceType(ServiceType.CARD_FUND);
					transaction.setStatus(TransactionStatus.SUCCESS);
					transaction.setTransactingUser(user);
					transaction.setTransactingUserName(user.getFirstName() + " " + user.getLastName());
					transaction.setTransactionAmount(tripCard.getCardScheme().getYearlyPrice());
					transaction.setTransactionCurrency("ZMW");
					transaction.setTransactionDate(new Date());
					transaction.setTransactionFee(0.00);
					transaction.setTransactionRef(RandomStringUtils.randomNumeric(12));
					transaction.setUpdatedAt(new Date());
					transaction.setUserId(user.getUserId());
					transaction.setVendor(null);
					transaction.setDevice(device);
					transaction = (Transaction)swpService.createNewRecord(transaction);
					
					if(tripCard.getCardScheme().getExpiryDate()!=null)
					{
						subscriptionExpiryDate = tripCard.getCardScheme().getExpiryDate();
					}
					else
					{
						calendar.add(Calendar.DATE, tripCard.getCardScheme().getValidityPeriod());
						subscriptionExpiryDate = calendar.getTime();
					}
					
					tripCard.setSubsciptionExpiryDate(subscriptionExpiryDate);
					swpService.updateRecord(tripCard);
					
					AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.CARD_CREDIT, requestId, this.swpService, user.getUsername(), tripCard.getTripCardId(), TripCard.class.getName(), 
						"Fund Card |  Card Pan: " + tripCard.getTripCardNumber() + " | By Operator: " + user.getFirstName() + " " + user.getLastName(), clientCode);
					
					jsonObject.add("tripCard", new Gson().toJson(tripCard));
					jsonObject.add("message", "Card Funding was successful");
					jsonObject.add("paymentOrderRef", transaction.getOrderRef());
					jsonObject.add("status", ERROR.GENERAL_SUCCESS);
					JsonObject jsonObj = jsonObject.build();
		            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
				}
				else if(roleCode.equals(RoleType.VENDOR))
				{
					if(wallet.getCurrentBalance()<tripCard.getCardScheme().getYearlyPrice())
					{
						jsonObject.add("status", ERROR.INSUFFICIENT_FUNDS_IN_WALLET);
						jsonObject.add("message", "Insufficient funds in wallet. Ensure your wallets balance is above ZMW" + tripCard.getCardScheme().getYearlyPrice());
						JsonObject jsonObj = jsonObject.build();
			            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
					}
					String messageRequest = "FUND_CARD_BY_VENDOR" + "###" + tripCard.getUniqueId()+"###"+user.getFirstName()+"###"+user.getLastName()+"###"+tripCard.getCardScheme().getYearlyPrice();
					String narration = "FUND_CARD_BY_VENDOR" + "###" + tripCard.getUniqueId()+"###"+user.getFirstName()+"###"+user.getLastName()+"###"+tripCard.getCardScheme().getYearlyPrice();
					String messageResponse = null;
					Transaction transaction = new Transaction();
					transaction.setCard(tripCard);
					transaction.setChannel(Channel.valueOf(channel));
					transaction.setCrCardId(tripCard.getTripCardId());
					transaction.setCrCardPan(tripCard.getTripCardNumber());
					transaction.setDrVendorId(vendor.getVendorId());
					transaction.setCreatedAt(new Date());
					transaction.setFixedCharge(0.00);
					transaction.setMessageRequest(messageRequest);
					transaction.setMessageResponse(messageResponse);
					transaction.setNarration(narration);
					transaction.setOrderRef(RandomStringUtils.randomNumeric(10));
					transaction.setPaymentMeans(PaymentMeans.CASH);
					transaction.setRebateAmount(0.00);
					transaction.setResponseCode(200);
					transaction.setServiceType(ServiceType.CARD_FUND);
					transaction.setStatus(TransactionStatus.SUCCESS);
					transaction.setTransactingUser(user);
					transaction.setTransactingUserName(user.getFirstName() + " " + user.getLastName());
					transaction.setTransactionAmount(tripCard.getCardScheme().getYearlyPrice());
					transaction.setTransactionCurrency("ZMW");
					transaction.setTransactionDate(new Date());
					transaction.setTransactionFee(0.00);
					transaction.setTransactionRef(RandomStringUtils.randomNumeric(12));
					transaction.setUpdatedAt(new Date());
					transaction.setUserId(user.getUserId());
					transaction.setVendor(vendor);
					transaction.setDrVendorId(vendor.getVendorId());
					transaction.setDevice(device);
					transaction = (Transaction)swpService.createNewRecord(transaction);
					

					AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.CARD_CREDIT, requestId, this.swpService, user.getUsername(), tripCard.getTripCardId(), TripCard.class.getName(), 
							"Fund Card |  Card Pan: " + tripCard.getTripCardNumber() + " | By Customer User: " + user.getFirstName() + " " + user.getLastName(), clientCode);
					
					if(tripCard.getCardScheme().getExpiryDate()!=null)
					{
						subscriptionExpiryDate = tripCard.getCardScheme().getExpiryDate();
					}
					else
					{
						calendar.add(Calendar.DATE, tripCard.getCardScheme().getValidityPeriod());
						subscriptionExpiryDate = calendar.getTime();
					}
					tripCard.setSubsciptionExpiryDate(subscriptionExpiryDate);
					swpService.updateRecord(tripCard);
					
					wallet.setCurrentBalance(wallet.getCurrentBalance() - tripCard.getCardScheme().getYearlyPrice());
					wallet.setUpdatedAt(new Date());
					swpService.updateRecord(wallet);
					
					jsonObject.add("wallet", new Gson().toJson(wallet));
					jsonObject.add("tripCard", new Gson().toJson(tripCard));
					jsonObject.add("message", "Card Funding was successful");
					jsonObject.add("paymentOrderRef", transaction.getOrderRef());
					jsonObject.add("status", ERROR.GENERAL_SUCCESS);
					JsonObject jsonObj = jsonObject.build();
		            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
				}
				else if(roleCode.equals(RoleType.CUSTOMER))
				{
					if(paymentMeans.equals(PaymentMeans.PROBASEPAY.name()))
					{
						String transactionVerification = null;
						JSONObject transactionVerificationJson = null;
						JSONObject jsObj = new JSONObject();
						transactionVerification = UtilityHelper.sendGet(UtilityHelper.PROBASEPAY_BASE_URL+"/transaction/check-status/"+probasePayMerchantCode+"/"+probasePayDeviceCode+"/"+transactionRef+"/"+hash, 
								null, jsObj);
						transactionVerificationJson = new JSONObject(transactionVerification);
						
						String ticketTransactionRef = RandomStringUtils.randomAlphabetic(12);
						hql = "Select tp from Transaction tp where tp.orderRef = '"+transactionRef+"' AND tp.client.clientCode = '"+clientCode+"' AND " +
								"tp.deletedAt IS NULL";
						Transaction transaction = (Transaction)swpService.getUniqueRecordByHQL(hql);
						
						if(transaction!=null)
						{
							jsonObject.add("status", ERROR.TRANSACTION_REF_ALREADY_PAID_PREVIOUSLY);
							jsonObject.add("message", "Transaction Reference you provided belongs to another transaction that has already been paid");
							JsonObject jsonObj = jsonObject.build();
				            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
						}
						
						JSONObject vehicleSeatsLockedDownTrip = new JSONObject();
						
						Double fixedCharge = transactionVerificationJson.has("fixedCharge") ? transactionVerificationJson.getDouble("fixedCharge") : 0.00;
						Double transactionFee = transactionVerificationJson.has("transactionCharge") ? transactionVerificationJson.getDouble("transactionCharge") : 0.00;
						Double transactionAmount = transactionVerificationJson.has("amount") ? transactionVerificationJson.getDouble("amount") : 0.00;
						
						
							
						String messageRequest = "FUND_CARD_BY_CUSTOMER" + "###" + tripCard.getUniqueId()+"###"+user.getFirstName()+"###"+user.getLastName()+"###"+tripCard.getCardScheme().getYearlyPrice() + "###" + hash;
						String narration = "FUND_CARD_BY_CUSTOMER" + "###" + tripCard.getUniqueId()+"###"+user.getFirstName()+"###"+user.getLastName()+"###"+tripCard.getCardScheme().getYearlyPrice() + "###" + hash;
						String messageResponse = null;
						transaction = new Transaction();
						transaction.setCard(tripCard);
						transaction.setChannel(Channel.valueOf(channel));
						transaction.setCrCardId(tripCard.getTripCardId());
						transaction.setCrCardPan(tripCard.getTripCardNumber());
						transaction.setDrVendorId(vendor.getVendorId());
						transaction.setCreatedAt(new Date());
						transaction.setFixedCharge(0.00);
						transaction.setMessageRequest(messageRequest);
						transaction.setMessageResponse(messageResponse);
						transaction.setNarration(narration);
						transaction.setOrderRef(transactionRef);
						transaction.setPaymentMeans(PaymentMeans.PROBASEPAY);
						transaction.setRebateAmount(0.00);
						transaction.setResponseCode(200);
						transaction.setServiceType(ServiceType.CARD_FUND);
						transaction.setStatus(TransactionStatus.SUCCESS);
						transaction.setTransactingUser(user);
						transaction.setTransactingUserName(user.getFirstName() + " " + user.getLastName());
						transaction.setTransactionAmount(tripCard.getCardScheme().getYearlyPrice());
						transaction.setTransactionCurrency("ZMW");
						transaction.setTransactionDate(new Date());
						transaction.setTransactionFee(0.00);
						transaction.setTransactionRef(RandomStringUtils.randomNumeric(12));
						transaction.setUpdatedAt(new Date());
						transaction.setUserId(user.getUserId());
						transaction.setVendor(vendor);
						transaction.setDevice(device);
						transaction = (Transaction)swpService.createNewRecord(transaction);
						
						if(tripCard.getCardScheme().getExpiryDate()!=null)
						{
							subscriptionExpiryDate = tripCard.getCardScheme().getExpiryDate();
						}
						else
						{
							calendar.add(Calendar.DATE, tripCard.getCardScheme().getValidityPeriod());
							subscriptionExpiryDate = calendar.getTime();
						}
						tripCard.setSubsciptionExpiryDate(subscriptionExpiryDate);
						swpService.updateRecord(tripCard);
						
						AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.CARD_CREDIT, requestId, this.swpService, user.getUsername(), tripCard.getTripCardId(), TripCard.class.getName(), 
								"Fund Card |  Card Pan: " + tripCard.getTripCardNumber() + " | By Customer User: " + user.getFirstName() + " " + user.getLastName(), clientCode);
						
						
						jsonObject.add("tripCard", new Gson().toJson(tripCard));
						jsonObject.add("message", "Card Funding was successful");
						jsonObject.add("paymentOrderRef", transaction.getOrderRef());
						jsonObject.add("status", ERROR.GENERAL_SUCCESS);
						JsonObject jsonObj = jsonObject.build();
			            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
					}
					jsonObject.add("message", "Payment means not valid");
					jsonObject.add("status", ERROR.PAYMENT_MEANS_NOT_VALID);
					JsonObject jsonObj = jsonObject.build();
		            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
				}
				else
				{
					jsonObject.add("message", "Invalid priviledges. You can not fund the card");
					jsonObject.add("status", ERROR.INVALID_CARD_FUND_PRIVILEDGES);
					JsonObject jsonObj = jsonObject.build();
		            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
				}
			}
			else if(tripCard.getCardScheme().getTripCardChargeMode().equals(TripCardChargeMode.PER_AMOUNT))
			{
				boolean chargeYearlyFee = true;
				if(tripCard.getSubsciptionExpiryDate()!=null && calendar.getTime().before(tripCard.getSubsciptionExpiryDate()))
				{
					chargeYearlyFee = false;
				}
				
				if(roleCode.equals(RoleType.OPERATOR))
				{
					Double yearlyFee = 0.00;
					Transaction transaction = null;
					if(chargeYearlyFee ==true)
					{
						if(tripCard.getCardScheme().getExpiryDate()!=null)
						{
							subscriptionExpiryDate = tripCard.getCardScheme().getExpiryDate();
						}
						else
						{
							calendar.add(Calendar.DATE, tripCard.getCardScheme().getValidityPeriod());
							subscriptionExpiryDate = calendar.getTime();
						}
						yearlyFee = tripCard.getCardScheme().getYearlyPrice();
						tripCard.setSubsciptionExpiryDate(subscriptionExpiryDate);
						
						String messageRequest = "YEARLY_FEE_COLLECTED_BY_OPERATOR" + "###" + tripCard.getUniqueId()+"###"+user.getFirstName()+"###"+user.getLastName()+"###"+tripCard.getCardScheme().getYearlyPrice();
						String narration = "YEARLY_FEE_COLLECTED_BY_OPERATOR" + "###" + tripCard.getUniqueId()+"###"+user.getFirstName()+"###"+user.getLastName()+"###"+tripCard.getCardScheme().getYearlyPrice();
						String messageResponse = null;
						transaction = new Transaction();
						transaction.setCard(tripCard);
						transaction.setChannel(Channel.valueOf(channel));
						transaction.setCrCardId(tripCard.getTripCardId());
						transaction.setCrCardPan(tripCard.getTripCardNumber());
						transaction.setCreatedAt(new Date());
						transaction.setFixedCharge(0.00);
						transaction.setMessageRequest(messageRequest);
						transaction.setMessageResponse(messageResponse);
						transaction.setNarration(narration);
						transaction.setOrderRef(RandomStringUtils.randomNumeric(10));
						transaction.setPaymentMeans(PaymentMeans.CASH);
						transaction.setRebateAmount(0.00);
						transaction.setResponseCode(200);
						transaction.setServiceType(ServiceType.CARD_YEARLY_FEE);
						transaction.setStatus(TransactionStatus.SUCCESS);
						transaction.setTransactingUser(user);
						transaction.setTransactingUserName(user.getFirstName() + " " + user.getLastName());
						transaction.setTransactionAmount(tripCard.getCardScheme().getYearlyPrice());
						transaction.setTransactionCurrency("ZMW");
						transaction.setTransactionDate(new Date());
						transaction.setTransactionFee(0.00);
						transaction.setTransactionRef(RandomStringUtils.randomNumeric(12));
						transaction.setUpdatedAt(new Date());
						transaction.setUserId(user.getUserId());
						transaction.setVendor(null);
						transaction.setDevice(device);
						transaction = (Transaction)swpService.createNewRecord(transaction);
						amountToFund = amountToFund - yearlyFee;
						
					}
					
					if(amountToFund>0)
					{
						tripCard.setCurrentBalance(tripCard.getCurrentBalance() + amountToFund);
						tripCard.setTotalCredited(tripCard.getTotalCredited() + amountToFund);
						tripCard.setUpdatedAt(new Date());
						
						String messageRequest = "FUND_CARD_BY_OPERATOR" + "###" + tripCard.getUniqueId()+"###"+user.getFirstName()+"###"+user.getLastName()+"###"+amountToFund;
						String narration = "FUND_CARD_BY_OPERATOR" + "###" + tripCard.getUniqueId()+"###"+user.getFirstName()+"###"+user.getLastName()+"###"+amountToFund;
						String messageResponse = null;
						Transaction transaction1 = new Transaction();
						transaction1.setCard(tripCard);
						transaction1.setChannel(Channel.valueOf(channel));
						transaction1.setCrCardId(tripCard.getTripCardId());
						transaction1.setCrCardPan(tripCard.getTripCardNumber());
						transaction1.setCreatedAt(new Date());
						transaction1.setFixedCharge(0.00);
						transaction1.setMessageRequest(messageRequest);
						transaction1.setMessageResponse(messageResponse);
						transaction1.setNarration(narration);
						transaction1.setOrderRef(RandomStringUtils.randomNumeric(10));
						transaction1.setPaymentMeans(PaymentMeans.CASH);
						transaction1.setRebateAmount(0.00);
						transaction1.setResponseCode(200);
						transaction1.setServiceType(ServiceType.CARD_FUND);
						transaction1.setStatus(TransactionStatus.SUCCESS);
						transaction1.setTransactingUser(user);
						transaction1.setTransactingUserName(user.getFirstName() + " " + user.getLastName());
						transaction1.setTransactionAmount(amountToFund);
						transaction1.setTransactionCurrency("ZMW");
						transaction1.setTransactionDate(new Date());
						transaction1.setTransactionFee(0.00);
						transaction1.setTransactionRef(RandomStringUtils.randomNumeric(12));
						transaction1.setUpdatedAt(new Date());
						transaction1.setUserId(user.getUserId());
						transaction1.setVendor(null);
						transaction1.setDevice(device);
						transaction1 = (Transaction)swpService.createNewRecord(transaction1);
						
						
						swpService.updateRecord(tripCard);
						
						
						AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.CARD_CREDIT, requestId, this.swpService, user.getUsername(), tripCard.getTripCardId(), TripCard.class.getName(), 
								"Fund Card |  Card Pan: " + tripCard.getTripCardNumber() + " | By Customer User: " + user.getFirstName() + " " + user.getLastName() + " | By Vendor: " + vendor.getCompanyName(), clientCode);
						
						jsonObject.add("tripCard", new Gson().toJson(tripCard));
						jsonObject.add("message", "Card Funding was successful");
						jsonObject.add("paymentOrderRef", transaction1.getOrderRef());
						jsonObject.add("status", ERROR.GENERAL_SUCCESS);
						JsonObject jsonObj = jsonObject.build();
			            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
					}
					else
					{
						if(yearlyFee>0)
						{
							jsonObject.add("tripCard", new Gson().toJson(tripCard));
							jsonObject.add("message", "Only the Yearly subscription fee for the card has been paid");
							jsonObject.add("paymentOrderRef", transaction.getOrderRef());
							jsonObject.add("status", ERROR.GENERAL_SUCCESS);
							JsonObject jsonObj = jsonObject.build();
				            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
						}
						else
						{
							jsonObject.add("tripCard", new Gson().toJson(tripCard));
							jsonObject.add("message", "Invalid amount provided to be funded");
							jsonObject.add("status", ERROR.FUND_AMOUNT_INVALID);
							JsonObject jsonObj = jsonObject.build();
				            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
						}
					}
				}
				else if(roleCode.equals(RoleType.VENDOR))
				{
					Transaction transaction = null;
					Double yearlyFee = 0.00;
					if(chargeYearlyFee ==true)
					{
						if(tripCard.getCardScheme().getExpiryDate()!=null)
						{
							subscriptionExpiryDate = tripCard.getCardScheme().getExpiryDate();
						}
						else
						{
							calendar.add(Calendar.DATE, tripCard.getCardScheme().getValidityPeriod());
							subscriptionExpiryDate = calendar.getTime();
						}
						yearlyFee = tripCard.getCardScheme().getYearlyPrice();
						tripCard.setSubsciptionExpiryDate(subscriptionExpiryDate);
						
						String messageRequest = "YEARLY_FEE_COLLECTED_BY_VENDOR" + "###" + tripCard.getUniqueId()+"###"+user.getFirstName()+"###"+user.getLastName()+"###"+tripCard.getCardScheme().getYearlyPrice();
						String narration = "YEARLY_FEE_COLLECTED_BY_VENDOR" + "###" + tripCard.getUniqueId()+"###"+user.getFirstName()+"###"+user.getLastName()+"###"+tripCard.getCardScheme().getYearlyPrice();
						String messageResponse = null;
						transaction = new Transaction();
						transaction.setCard(tripCard);
						transaction.setChannel(Channel.valueOf(channel));
						transaction.setCrCardId(tripCard.getTripCardId());
						transaction.setCrCardPan(tripCard.getTripCardNumber());
						transaction.setCreatedAt(new Date());
						transaction.setFixedCharge(0.00);
						transaction.setMessageRequest(messageRequest);
						transaction.setMessageResponse(messageResponse);
						transaction.setNarration(narration);
						transaction.setOrderRef(RandomStringUtils.randomNumeric(10));
						transaction.setPaymentMeans(PaymentMeans.CASH);
						transaction.setRebateAmount(0.00);
						transaction.setResponseCode(200);
						transaction.setServiceType(ServiceType.CARD_YEARLY_FEE);
						transaction.setStatus(TransactionStatus.SUCCESS);
						transaction.setTransactingUser(user);
						transaction.setTransactingUserName(user.getFirstName() + " " + user.getLastName());
						transaction.setTransactionAmount(tripCard.getCardScheme().getYearlyPrice());
						transaction.setTransactionCurrency("ZMW");
						transaction.setTransactionDate(new Date());
						transaction.setTransactionFee(0.00);
						transaction.setTransactionRef(RandomStringUtils.randomNumeric(12));
						transaction.setUpdatedAt(new Date());
						transaction.setUserId(user.getUserId());
						transaction.setVendor(vendor);
						transaction.setDrVendorId(vendor.getVendorId());
						transaction.setDevice(device);
						transaction = (Transaction)swpService.createNewRecord(transaction);
						amountToFund = amountToFund - yearlyFee;
						
						wallet.setCurrentBalance(wallet.getCurrentBalance() - yearlyFee);
						wallet.setUpdatedAt(new Date());
						swpService.updateRecord(wallet);
						
						
						
					}
					Transaction transaction1 = null;
					if(amountToFund>0)
					{
						String messageRequest = "FUND_CARD_BY_VENDOR" + "###" + tripCard.getUniqueId()+"###"+user.getFirstName()+"###"+user.getLastName()+"###"+amountToFund;
						String narration = "FUND_CARD_BY_VENDOR" + "###" + tripCard.getUniqueId()+"###"+user.getFirstName()+"###"+user.getLastName()+"###"+amountToFund;
						String messageResponse = null;
						transaction1 = new Transaction();
						transaction1.setCard(tripCard);
						transaction1.setChannel(Channel.valueOf(channel));
						transaction1.setCrCardId(tripCard.getTripCardId());
						transaction1.setCrCardPan(tripCard.getTripCardNumber());
						transaction1.setDrVendorId(vendor.getVendorId());
						transaction1.setCreatedAt(new Date());
						transaction1.setFixedCharge(0.00);
						transaction1.setMessageRequest(messageRequest);
						transaction1.setMessageResponse(messageResponse);
						transaction1.setNarration(narration);
						transaction1.setOrderRef(RandomStringUtils.randomNumeric(10));
						transaction1.setPaymentMeans(PaymentMeans.CASH);
						transaction1.setRebateAmount(0.00);
						transaction1.setResponseCode(200);
						transaction1.setServiceType(ServiceType.CARD_FUND);
						transaction1.setStatus(TransactionStatus.SUCCESS);
						transaction1.setTransactingUser(user);
						transaction1.setTransactingUserName(user.getFirstName() + " " + user.getLastName());
						transaction1.setTransactionAmount(amountToFund);
						transaction1.setTransactionCurrency("ZMW");
						transaction1.setTransactionDate(new Date());
						transaction1.setTransactionFee(0.00);
						transaction1.setTransactionRef(RandomStringUtils.randomNumeric(12));
						transaction1.setUpdatedAt(new Date());
						transaction1.setUserId(user.getUserId());
						transaction1.setVendor(vendor);
						transaction1.setDrVendorId(vendor.getVendorId());
						transaction1.setDevice(device);
						transaction1 = (Transaction)swpService.createNewRecord(transaction1);
						
						tripCard.setCurrentBalance(tripCard.getCurrentBalance() + amountToFund);
						tripCard.setTotalCredited(tripCard.getTotalCredited() + amountToFund);
						tripCard.setUpdatedAt(new Date());
						swpService.updateRecord(tripCard);
	
						wallet.setCurrentBalance(wallet.getCurrentBalance() - amountToFund);
						wallet.setUpdatedAt(new Date());
						swpService.updateRecord(wallet);
						
						AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.CARD_CREDIT, requestId, this.swpService, user.getUsername(), tripCard.getTripCardId(), TripCard.class.getName(), 
								"Fund Card |  Card Pan: " + tripCard.getTripCardNumber() + " | By Customer User: " + user.getFirstName() + " " + user.getLastName() + " | By Vendor: " + vendor.getCompanyName(), clientCode);
						
						jsonObject.add("wallet", new Gson().toJson(wallet));
						jsonObject.add("tripCard", new Gson().toJson(tripCard));
						jsonObject.add("message", "Card Funding was successful." + (yearlyFee>0 ? " Yearly subscription fee for the card was also paid" : ""));
						jsonObject.add("paymentOrderRef", transaction1.getOrderRef());
						jsonObject.add("status", ERROR.GENERAL_SUCCESS);
						JsonObject jsonObj = jsonObject.build();
			            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
					}
					else
					{
						if(yearlyFee>0)
						{
							jsonObject.add("wallet", new Gson().toJson(wallet));
							jsonObject.add("tripCard", new Gson().toJson(tripCard));
							jsonObject.add("message", "Only the Yearly subscription fee for the card has been paid");
							jsonObject.add("paymentOrderRef", transaction.getOrderRef());
							jsonObject.add("status", ERROR.GENERAL_SUCCESS);
							JsonObject jsonObj = jsonObject.build();
				            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
						}
						else
						{
							jsonObject.add("wallet", new Gson().toJson(wallet));
							jsonObject.add("tripCard", new Gson().toJson(tripCard));
							jsonObject.add("message", "Invalid amount provided to be funded");
							jsonObject.add("status", ERROR.FUND_AMOUNT_INVALID);
							JsonObject jsonObj = jsonObject.build();
				            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
						}
					}
				}
				else if(roleCode.equals(RoleType.CUSTOMER))
				{
					if(paymentMeans.equals(PaymentMeans.PROBASEPAY.name()))
					{
						
						String transactionVerification = null;
						JSONObject transactionVerificationJson = null;
						JSONObject jsObj = new JSONObject();
						transactionVerification = UtilityHelper.sendGet(UtilityHelper.PROBASEPAY_BASE_URL+"/transaction/check-status/"+probasePayMerchantCode+"/"+probasePayDeviceCode+"/"+transactionRef+"/"+hash, 
								null, jsObj);
						transactionVerificationJson = new JSONObject(transactionVerification);
						
						String ticketTransactionRef = RandomStringUtils.randomAlphabetic(12);
						hql = "Select tp from Transaction tp where tp.orderRef = '"+transactionRef+"' AND tp.client.clientCode = '"+clientCode+"' AND " +
								"tp.deletedAt IS NULL";
						Transaction transaction = (Transaction)swpService.getUniqueRecordByHQL(hql);
						
						if(transaction!=null)
						{
							jsonObject.add("status", ERROR.TRANSACTION_REF_ALREADY_PAID_PREVIOUSLY);
							jsonObject.add("message", "Transaction Reference you provided belongs to another transaction that has already been paid");
							JsonObject jsonObj = jsonObject.build();
				            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
						}
						
						JSONObject vehicleSeatsLockedDownTrip = new JSONObject();
						
						Double fixedCharge = transactionVerificationJson.has("fixedCharge") ? transactionVerificationJson.getDouble("fixedCharge") : 0.00;
						Double transactionFee = transactionVerificationJson.has("transactionCharge") ? transactionVerificationJson.getDouble("transactionCharge") : 0.00;
						Double transactionAmount = transactionVerificationJson.has("amount") ? transactionVerificationJson.getDouble("amount") : 0.00;
						
						
						Double yearlyFee = 0.00;
						if(chargeYearlyFee ==true)
						{
							if(tripCard.getCardScheme().getExpiryDate()!=null)
							{
								subscriptionExpiryDate = tripCard.getCardScheme().getExpiryDate();
							}
							else
							{
								calendar.add(Calendar.DATE, tripCard.getCardScheme().getValidityPeriod());
								subscriptionExpiryDate = calendar.getTime();
							}
							yearlyFee = tripCard.getCardScheme().getYearlyPrice();
							tripCard.setSubsciptionExpiryDate(subscriptionExpiryDate);
							
							String messageRequest = "YEARLY_FEE_PAID_BY_CUSTOMER" + "###" + tripCard.getUniqueId()+"###"+user.getFirstName()+"###"+user.getLastName()+"###"+tripCard.getCardScheme().getYearlyPrice();
							String narration = "YEARLY_FEE_PAID_BY_CUSTOMER" + "###" + tripCard.getUniqueId()+"###"+user.getFirstName()+"###"+user.getLastName()+"###"+tripCard.getCardScheme().getYearlyPrice();
							String messageResponse = null;
							transaction = new Transaction();
							transaction.setCard(tripCard);
							transaction.setChannel(Channel.valueOf(channel));
							transaction.setCrCardId(tripCard.getTripCardId());
							transaction.setCrCardPan(tripCard.getTripCardNumber());
							transaction.setCreatedAt(new Date());
							transaction.setFixedCharge(0.00);
							transaction.setMessageRequest(messageRequest);
							transaction.setMessageResponse(messageResponse);
							transaction.setNarration(narration);
							transaction.setOrderRef(RandomStringUtils.randomNumeric(10));
							transaction.setPaymentMeans(PaymentMeans.CASH);
							transaction.setRebateAmount(0.00);
							transaction.setResponseCode(200);
							transaction.setServiceType(ServiceType.CARD_YEARLY_FEE);
							transaction.setStatus(TransactionStatus.SUCCESS);
							transaction.setTransactingUser(user);
							transaction.setTransactingUserName(user.getFirstName() + " " + user.getLastName());
							transaction.setTransactionAmount(tripCard.getCardScheme().getYearlyPrice());
							transaction.setTransactionCurrency("ZMW");
							transaction.setTransactionDate(new Date());
							transaction.setTransactionFee(0.00);
							transaction.setTransactionRef(RandomStringUtils.randomNumeric(12));
							transaction.setUpdatedAt(new Date());
							transaction.setUserId(user.getUserId());
							transaction.setVendor(null);
							transaction.setDevice(device);
							transaction = (Transaction)swpService.createNewRecord(transaction);
							amountToFund = amountToFund - yearlyFee;
						}	
						
						Transaction transaction1 = null;
						if(amountToFund>0)
						{
							String messageRequest = "FUND_CARD_BY_CUSTOMER" + "###" + tripCard.getUniqueId()+"###"+user.getFirstName()+"###"+user.getLastName()+"###"+tripCard.getCardScheme().getYearlyPrice() + "###" + hash;
							String narration = "FUND_CARD_BY_CUSTOMER" + "###" + tripCard.getUniqueId()+"###"+user.getFirstName()+"###"+user.getLastName()+"###"+tripCard.getCardScheme().getYearlyPrice() + "###" + hash;
							String messageResponse = null;
							transaction1 = new Transaction();
							transaction1.setCard(tripCard);
							transaction1.setChannel(Channel.valueOf(channel));
							transaction1.setCrCardId(tripCard.getTripCardId());
							transaction1.setCrCardPan(tripCard.getTripCardNumber());
							transaction1.setDrVendorId(vendor.getVendorId());
							transaction1.setCreatedAt(new Date());
							transaction1.setFixedCharge(0.00);
							transaction1.setMessageRequest(messageRequest);
							transaction1.setMessageResponse(messageResponse);
							transaction1.setNarration(narration);
							transaction1.setOrderRef(RandomStringUtils.randomNumeric(10));
							transaction1.setPaymentMeans(PaymentMeans.PROBASEPAY);
							transaction1.setRebateAmount(0.00);
							transaction1.setResponseCode(200);
							transaction1.setServiceType(ServiceType.CARD_FUND);
							transaction1.setStatus(TransactionStatus.SUCCESS);
							transaction1.setTransactingUser(user);
							transaction1.setTransactingUserName(user.getFirstName() + " " + user.getLastName());
							transaction1.setTransactionAmount(tripCard.getCardScheme().getYearlyPrice());
							transaction1.setTransactionCurrency("ZMW");
							transaction1.setTransactionDate(new Date());
							transaction1.setTransactionFee(0.00);
							transaction1.setTransactionRef(RandomStringUtils.randomNumeric(12));
							transaction1.setUpdatedAt(new Date());
							transaction1.setUserId(user.getUserId());
							transaction1.setVendor(vendor);
							transaction1.setDevice(device);
							transaction1 = (Transaction)swpService.createNewRecord(transaction1);
							
							tripCard.setCurrentBalance(tripCard.getCurrentBalance() + amountToFund);
							tripCard.setTotalCredited(tripCard.getTotalCredited() + amountToFund);
							tripCard.setUpdatedAt(new Date());
							swpService.updateRecord(tripCard);
							
							AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.CARD_CREDIT, requestId, this.swpService, user.getUsername(), tripCard.getTripCardId(), TripCard.class.getName(), 
									"Fund Card |  Card Pan: " + tripCard.getTripCardNumber() + " | By Customer User: " + user.getFirstName() + " " + user.getLastName(), clientCode);
							
							
							jsonObject.add("tripCard", new Gson().toJson(tripCard));
							jsonObject.add("message", "Card Funding was successful");
							jsonObject.add("paymentOrderRef", transaction1.getOrderRef());
							jsonObject.add("status", ERROR.GENERAL_SUCCESS);
							JsonObject jsonObj = jsonObject.build();
				            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
						}
						else
						{
							if(yearlyFee>0)
							{
								jsonObject.add("tripCard", new Gson().toJson(tripCard));
								jsonObject.add("message", "Only the Yearly subscription fee for the card has been paid");
								jsonObject.add("paymentOrderRef", transaction.getOrderRef());
								jsonObject.add("status", ERROR.GENERAL_SUCCESS);
								JsonObject jsonObj = jsonObject.build();
					            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
							}
							else
							{
								jsonObject.add("tripCard", new Gson().toJson(tripCard));
								jsonObject.add("message", "Invalid amount provided to be funded");
								jsonObject.add("status", ERROR.FUND_AMOUNT_INVALID);
								JsonObject jsonObj = jsonObject.build();
					            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
							}
						}
					}
					
					jsonObject.add("message", "Payment means not valid");
					jsonObject.add("status", ERROR.PAYMENT_MEANS_NOT_VALID);
					JsonObject jsonObj = jsonObject.build();
		            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
				}
				else
				{
					jsonObject.add("message", "Invalid priviledges. You can not fund the card");
					jsonObject.add("status", ERROR.INVALID_CARD_FUND_PRIVILEDGES);
					JsonObject jsonObj = jsonObject.build();
		            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
				}
			}
			else
			{

				jsonObject.add("message", "Invalid Card. Card Charge Mode Can Not Be Found");
				jsonObject.add("status", ERROR.INVALID_CARD_CHARGE_MODE);
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			
			
		}catch(Exception e)
		{
			log.warn(e);
			e.printStackTrace();
			JsonObject jsonObj = jsonObject.build();
            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
		}
	}


}