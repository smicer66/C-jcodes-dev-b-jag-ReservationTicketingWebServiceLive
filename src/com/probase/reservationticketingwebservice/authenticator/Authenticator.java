package com.probase.reservationticketingwebservice.authenticator;


import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.net.URLEncoder;
import java.security.GeneralSecurityException;

import javax.json.Json;
import javax.json.JsonObject;
import javax.json.JsonObjectBuilder;
import javax.persistence.Column;
import javax.persistence.JoinColumn;
import javax.persistence.OneToOne;
import javax.security.auth.login.LoginException;
import javax.ws.rs.core.Response;

import org.apache.commons.lang.RandomStringUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.google.gson.Gson;
import com.probase.reservationticketingwebservice.enumerations.RequestType;
import com.probase.reservationticketingwebservice.enumerations.RoleType;
import com.probase.reservationticketingwebservice.enumerations.UserStatus;
import com.probase.reservationticketingwebservice.models.AuditTrail;
import com.probase.reservationticketingwebservice.models.Client;
import com.probase.reservationticketingwebservice.models.Station;
import com.probase.reservationticketingwebservice.models.Transaction;
import com.probase.reservationticketingwebservice.models.User;
import com.probase.reservationticketingwebservice.models.UserRole;
import com.probase.reservationticketingwebservice.models.Vendor;
import com.probase.reservationticketingwebservice.models.Wallet;
import com.probase.reservationticketingwebservice.util.Application;
import com.probase.reservationticketingwebservice.util.ERROR;
import com.probase.reservationticketingwebservice.util.PrbCustomService;
import com.probase.reservationticketingwebservice.util.ServiceLocator;
import com.probase.reservationticketingwebservice.util.SmsSender;
import com.probase.reservationticketingwebservice.util.SwpService;
import com.probase.reservationticketingwebservice.util.UtilityHelper;

public final class Authenticator {

    private static Authenticator authenticator = null;

    // A user storage which stores <username, password>
    private final Map<String, String> usersStorage = new HashMap();

    // A service key storage which stores <service_key, username>
    private final Map<String, String> serviceKeysStorage = new HashMap();

    // An authentication token storage which stores <service_key, auth_token>.
    private final Map<String, String> authorizationTokensStorage = new HashMap();
    
    private static Logger log = Logger.getLogger(Authenticator.class);
	private ServiceLocator serviceLocator = null;
	public SwpService swpService = null;
	public PrbCustomService swpCustomService = PrbCustomService.getInstance();
	Application application = null;

	SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

    private Authenticator() {
        // The usersStorage pretty much represents a user table in the database
        //usersStorage.put( "username1", "passwordForUser1" );
        //usersStorage.put( "username2", "passwordForUser2" );
        //usersStorage.put( "username3", "passwordForUser3" );

        /**
         * Service keys are pre-generated by the system and is given to the
         * authorized client who wants to have access to the REST API. Here,
         * only username1 and username2 is given the REST service access with
         * their respective service keys.
         */
        //serviceKeysStorage.put( "f80ebc87-ad5c-4b29-9366-5359768df5a1", "username1" );
        //serviceKeysStorage.put( "3b91cab8-926f-49b6-ba00-920bcf934c2a", "username2" );
    	serviceLocator = ServiceLocator.getInstance();
    }

    public static Authenticator getInstance() {
        if ( authenticator == null ) {
            authenticator = new Authenticator();
        }

        return authenticator;
    }

    public Response login(String username, String encPassword, String clientCode, String ipAddress, String requestId, String roleCode) throws LoginException {

    	JsonObjectBuilder jsonObject = Json.createObjectBuilder();
		try{
			jsonObject.add("username", username);
			jsonObject.add("clientCode", clientCode);
			if(username==null || encPassword==null)
	    	{
				jsonObject.add("status", ERROR.INCOMPLETE_PARAMETERS);
				jsonObject.add("message", "Incomplete Parameters in request");
				
	            JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
	    	}

			this.swpService = this.serviceLocator.getSwpService();
			application = Application.getInstance(swpService);

			String clientPrivateKey = application.getPublicKey(clientCode);
			//log.info("username: " + username);
			//log.info("encPassword: " + encPassword);
			//log.info("clientPrivateKey: " + clientPrivateKey);
			
			if(clientPrivateKey==null)
			{
				jsonObject.add("status", ERROR.INVALID_CLIENT_NOT_FOUND);
				jsonObject.add("message", "Invalid client Error. Client Not Found");
				if(username!=null)
					jsonObject.add("username", username);
				
	            JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			
			RoleType rType = null;
			try
			{
				rType = RoleType.valueOf(roleCode);
			}
			catch(IllegalArgumentException | NullPointerException e)
			{
				jsonObject.add("status", ERROR.INVALID_ROLE_TYPE_PROVIDED);
				jsonObject.add("message", "Invalid Role Type Provided");
				if(username!=null)
					jsonObject.add("username", username);
				
	            JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			String hql = "Select tp from User tp where tp.username = '" + username + "'" +
					" AND tp.userStatus = " + UserStatus.ACTIVE.ordinal() + " AND tp.deletedAt IS NULL AND " +
					//"tp.isActive = 1 AND tp.roleCode = " + rType.ordinal() + " AND " +
					"tp.client.clientCode = '"+clientCode+"'";
			//log.info("hql: " + hql);
			//log.info("UserStatus.ACTIVE.ordinal() == " + UserStatus.ACTIVE.name());
			//log.info("UserStatus.INACTIVE.ordinal() == " + UserStatus.INACTIVE.name());
			User user = (User)this.swpService.getUniqueRecordByHQL(hql);
			
			if(user!=null)
			{
				Boolean requireOtp = user.getRequireOtp();
				String epassword = user.getPassword();
				String password_1 = epassword;
				//Object password = UtilityHelper.decryptData(epassword, clientPrivateKey);
				//String password_1 = (String)password;
				
				////log.info("password_1" + password_1);
				
				Object decryptedPasswordFromClient = UtilityHelper.decryptData(encPassword, clientPrivateKey);
				String clientPassword = (String)decryptedPasswordFromClient;
				if(!UtilityHelper.bcryptCheckData(password_1, clientPassword))
				{
					
				//}
				//if(!password_1.equals(encPassword))
				//{
					jsonObject.add("status", ERROR.AUTHENTICATE_FAIL);
					jsonObject.add("message", "Authentication Failed");
					jsonObject.add("user", username);
		            JsonObject jsonObj = jsonObject.build();
		 
		            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
				}
				
				
				hql = "Select tp from UserRole tp where tp.user.userId = " + user.getUserId() + " AND tp.roleCode = " + rType.ordinal() + " AND tp.isActive = " + 1 + " AND " +
						"tp.deletedAt IS NULL";
				System.out.println(hql);
				UserRole userRole = (UserRole)swpService.getUniqueRecordByHQL(hql);
				if(userRole==null)
				{
					jsonObject.add("status", ERROR.AUTHENTICATE_FAIL);
					jsonObject.add("message", "Authentication Failed. User does not have the role specified");
					jsonObject.add("user", username);
		            JsonObject jsonObj = jsonObject.build();
		 
		            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
				}
				
				user.setFailedLoginCount(0);
				if(requireOtp!=null && requireOtp.equals(Boolean.TRUE))
				{
					user.setOtp(RandomStringUtils.randomNumeric(4));
				}
				else
				{
					user.setLastLoginDate(new Date());
					this.swpService.updateRecord(user);
				}
				
				JSONObject userDetails = new JSONObject();
				userDetails.put("username", username);
				userDetails.put("roleCode", RoleType.valueOf(userRole.getRoleCode().name()));
				userDetails.put("priviledges", user.getPrivileges());
				
				Gson gson = new Gson();
				String obj = gson.toJson(userDetails);
				//Key jwtKey = Application.getKey();
				//String token = Jwts.builder().setSubject(obj).signWith(SignatureAlgorithm.HS512, jwtKey).compact();
				String tkId = RandomStringUtils.randomAlphanumeric(10);
				//log.info("tkId ==" + tkId);
				String token = application.createJWT(tkId, clientCode, obj, (24*60*60*1000));
				
				AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.LOGIN_USER, requestId, this.swpService, user.getUsername(), user.getUserId(), User.class.getName(), 
						"Login By " + user.getFirstName() + " " + user.getLastName(), clientCode);
				
				jsonObject.add("status", ERROR.GENERAL_SUCCESS);
				jsonObject.add("message", "Authentication Ok");
				jsonObject.add("username", user.getUsername());
				jsonObject.add("roleCode", userRole.getRoleCode().name());
				jsonObject.add("token", token);
				if(user.getExternalId()!=null)
					jsonObject.add("externalId", user.getExternalId());
				
				jsonObject.add("firstName", user.getFirstName()==null ? "" : user.getFirstName());
				jsonObject.add("lastName", user.getLastName()==null ? "" : user.getLastName());
				jsonObject.add("otherName", user.getOtherName()==null ? "" : user.getOtherName());
				
				if(userRole.getRoleCode().equals(RoleType.VENDOR))
				{
					hql = "Select tp from Wallet tp where tp.vendor.vendorId = " + user.getVendor().getVendorId() + " AND tp.deletedAt IS NULL";
					Wallet wallet = (Wallet)swpService.getUniqueRecordByHQL(hql);
					if(wallet!=null)
						jsonObject.add("wallet", new Gson().toJson(wallet));
				
					hql = "Select tp from Vendor tp where tp.vendorId = " + user.getVendor().getVendorId() + " AND tp.deletedAt IS NULL";
					Vendor vendor = (Vendor)swpService.getUniqueRecordByHQL(hql);
					if(vendor!=null)
						jsonObject.add("vendor", new Gson().toJson(vendor));
				}

				
				if(requireOtp!=null && requireOtp.equals(Boolean.TRUE))
				{
					jsonObject.add("otp", user.getOtp());
					jsonObject.add("otprecmobile", user.getMobileNumber());

					String message = "Logging Into ZRL IMS? Your OTP is " + user.getOtp() + ". Your OTP expires in 5 minutes.";
		            UtilityHelper.sendSMS(this.swpService, message, user.getMobileNumber());
				}
	            JsonObject jsonObj = jsonObject.build();
	            
	            
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			else
			{
				//return null;
				
				hql = "Select tp from User tp where tp.username = '" + username + "'";
				user = (User)this.swpService.getUniqueRecordByHQL(hql);
				if(user!=null)
				{
					user.setFailedLoginCount((user.getFailedLoginCount()==null ? 0 : user.getFailedLoginCount()) + 1);
					if(user.getFailedLoginCount()==3)
					{
						user.setUserStatus(UserStatus.LOCKED);
						this.swpService.updateRecord(user);
					}else
					{
						this.swpService.updateRecord(user);
					}
					jsonObject.add("status", ERROR.AUTHENTICATE_FAIL);
					jsonObject.add("message", "Authentication Failed");
					jsonObject.add("user", username);
				}
				else
				{
					jsonObject.add("status", ERROR.AUTHENTICATE_FAIL);
					jsonObject.add("message", "Authentication Failed");
					jsonObject.add("user", username);
				}

	            JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			
			
		}catch(Exception e)
		{
			e.printStackTrace();
			log.warn(e); log.error("exception...", e); log.error("exception...", e);
            JsonObject jsonObj = jsonObject.build();
			return UtilityHelper.getNoCacheResponseBuilder( Response.Status.SERVICE_UNAVAILABLE ).entity( jsonObj.toString() ).build();
		}
    }
    
    
    
    /*public Response loginOld(String username, String encPassword, String clientCode, String ipAddress, String requestId) throws LoginException {

    	JsonObjectBuilder jsonObject = Json.createObjectBuilder();
		try{
			jsonObject.add("username", username);
			jsonObject.add("clientCode", clientCode);
			if(username==null || encPassword==null)
	    	{
				jsonObject.add("status", ERROR.INCOMPLETE_PARAMETERS);
				jsonObject.add("message", "Incomplete Parameters in request");
				
	            JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
	    	}

			this.swpService = this.serviceLocator.getSwpService();
			application = Application.getInstance(swpService);

			String clientPrivateKey = application.getPublicKey(clientCode);
			//log.info("username: " + username);
			//log.info("encPassword: " + encPassword);
			//log.info("clientPrivateKey: " + clientPrivateKey);
			
			if(clientPrivateKey==null)
			{
				jsonObject.add("status", ERROR.INVALID_CLIENT_NOT_FOUND);
				jsonObject.add("message", "Invalid client Error. Client Not Found");
				if(username!=null)
					jsonObject.add("username", username);
				
	            JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			
			String hql = "Select tp from User tp where tp.username = '" + username + "'" +
					"AND tp.userStatus = " + UserStatus.ACTIVE.ordinal() + " AND tp.deletedAt IS NULL AND " +
					"tp.client.clientCode = '"+clientCode+"'";
			//log.info("hql: " + hql);
			//log.info("UserStatus.ACTIVE.ordinal() == " + UserStatus.ACTIVE.name());
			//log.info("UserStatus.INACTIVE.ordinal() == " + UserStatus.INACTIVE.name());
			User user = (User)this.swpService.getUniqueRecordByHQL(hql);
			
			if(user!=null)
			{

				Boolean requireOtp = user.getRequireOtp();
				String epassword = user.getPassword();
				Object password = UtilityHelper.decryptData(epassword, clientPrivateKey);
				String password_1 = (String)password;
				//log.info("password_1" + password_1);
				
				if(!password_1.equals(encPassword))
				{
					jsonObject.add("status", ERROR.AUTHENTICATE_FAIL);
					jsonObject.add("message", "Authentication Failed");
					jsonObject.add("user", username);
		            JsonObject jsonObj = jsonObject.build();
		 
		            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
				}
					
				
				user.setFailedLoginCount(0);
				if(requireOtp!=null && requireOtp.equals(Boolean.TRUE))
				{
					user.setOtp(RandomStringUtils.randomNumeric(4));
				}
				else
				{
					user.setLastLoginDate(new Date());
					this.swpService.updateRecord(user);
				}
				
				JSONObject userDetails = new JSONObject();
				userDetails.put("username", username);
				userDetails.put("roleCode", RoleType.valueOf(userRole.getRoleCode().name()));
				userDetails.put("priviledges", user.getPrivileges());
				
				Gson gson = new Gson();
				String obj = gson.toJson(userDetails);
				//Key jwtKey = Application.getKey();
				//String token = Jwts.builder().setSubject(obj).signWith(SignatureAlgorithm.HS512, jwtKey).compact();
				String tkId = RandomStringUtils.randomAlphanumeric(10);
				//log.info("tkId ==" + tkId);
				String token = application.createJWT(tkId, clientCode, obj, (24*60*60*1000));
				
				AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.LOGIN_USER, requestId, this.swpService, user.getUsername(), user.getUserId(), User.class.getName(), 
						"Login By " + user.getFirstName() + " " + user.getLastName(), clientCode);
				
				jsonObject.add("status", ERROR.GENERAL_SUCCESS);
				jsonObject.add("message", "Authentication Ok");
				jsonObject.add("username", user.getUsername());
				jsonObject.add("roleCode", user.getRoleCode().name());
				jsonObject.add("token", token);
				if(user.getExternalId()!=null)
					jsonObject.add("externalId", user.getExternalId());
				
				jsonObject.add("firstName", user.getFirstName()==null ? "" : user.getFirstName());
				jsonObject.add("lastName", user.getLastName()==null ? "" : user.getLastName());
				jsonObject.add("otherName", user.getOtherName()==null ? "" : user.getOtherName());
				
				if(user.getRoleCode().equals(RoleType.VENDOR))
				{
					hql = "Select tp from Wallet tp where tp.vendor.vendorId = " + user.getVendor().getVendorId() + " AND tp.deletedAt IS NULL";
					Wallet wallet = (Wallet)swpService.getUniqueRecordByHQL(hql);
					if(wallet!=null)
						jsonObject.add("wallet", new Gson().toJson(wallet));
				
					hql = "Select tp from Vendor tp where tp.vendorId = " + user.getVendor().getVendorId() + " AND tp.deletedAt IS NULL";
					Vendor vendor = (Vendor)swpService.getUniqueRecordByHQL(hql);
					if(vendor!=null)
						jsonObject.add("vendor", new Gson().toJson(vendor));
				}

				
				if(requireOtp!=null && requireOtp.equals(Boolean.TRUE))
				{
					jsonObject.add("otp", user.getOtp());
					jsonObject.add("otprecmobile", user.getMobileNumber());

					String message = "Logging Into ZRL IMS? Your OTP is " + user.getOtp() + ". Your OTP expires in 5 minutes.";
		            UtilityHelper.sendSMS(this.swpService, message, user.getMobileNumber());
				}
	            JsonObject jsonObj = jsonObject.build();
	            
	            
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			else
			{
				//return null;
				hql = "Select tp from User tp where tp.username = '" + username + "'";
				user = (User)this.swpService.getUniqueRecordByHQL(hql);
				if(user!=null)
				{
					user.setFailedLoginCount((user.getFailedLoginCount()==null ? 0 : user.getFailedLoginCount()) + 1);
					if(user.getFailedLoginCount()==3)
					{
						user.setUserStatus(UserStatus.LOCKED);
						this.swpService.updateRecord(user);
					}else
					{
						this.swpService.updateRecord(user);
					}
					jsonObject.add("status", ERROR.AUTHENTICATE_FAIL);
					jsonObject.add("message", "Authentication Failed");
					jsonObject.add("user", username);
				}
				else
				{
					jsonObject.add("status", ERROR.AUTHENTICATE_FAIL);
					jsonObject.add("message", "Authentication Failed");
					jsonObject.add("user", username);
				}

	            JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			
			
		}catch(Exception e)
		{
			e.printStackTrace();
			log.warn(e); log.error("exception...", e); log.error("exception...", e);
            JsonObject jsonObj = jsonObject.build();
			return UtilityHelper.getNoCacheResponseBuilder( Response.Status.SERVICE_UNAVAILABLE ).entity( jsonObj.toString() ).build();
		}
    }*/

    public void logout( String authToken, String requestId, String ipAddress ) throws Exception {
    	this.swpService = this.serviceLocator.getSwpService();
    	this.application = Application.getInstance(this.swpService);

    	this.application.destroyJWT(authToken);
    	return;
    }
    
    
	
	
	public Response forgotPassword(String username, String requestId, String ipAddress, String clientCode)
	{
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
		try
		{
			this.swpService = this.serviceLocator.getSwpService();
			application = Application.getInstance(swpService);
			Map<String, String> bankKeys = application.getPrivateKeys();
			if(bankKeys.size()==0)
			{
				return null;
			}
			
			//Key key = Application.getKey();
			////log.info("JWT Key: " + key.toString());
			String userClientCode = null;
			
			
			String hql = "Select tp from User tp where tp.username = '" + username + "' " +
					"AND tp.userStatus = " + UserStatus.ACTIVE.ordinal() + " AND tp.deletedAt is NULL AND tp.client.clientCode = '"+clientCode+"'";
			User user = (User)this.swpService.getUniqueRecordByHQL(hql);
			
			
			
			if(user!=null)
			{
				String bankKey = bankKeys.get(clientCode);
				
				
				user.setFailedLoginCount(0);
				user.setLockOut(Boolean.FALSE);
				String password = RandomStringUtils.randomAlphanumeric(8);
				String encPassword = (String)UtilityHelper.encryptData(password, bankKey);
				user.setPassword(encPassword);
				this.swpService.updateRecord(user);
				
				AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.FORGOT_PASSWORD, requestId, this.swpService, user.getUsername(), user.getUserId(), User.class.getName(), 
						"Request for a password recovery by - " + user.getFirstName() + " " + user.getLastName(), clientCode);
				
				String message = "Forgot your password? Your new password is " + password + ". Log in and change your temporary password.";
	            UtilityHelper.sendSMS(this.swpService, message, user.getMobileNumber());
	            
				//jsonObject.add("ps", password);
				jsonObject.add("recMobile", user.getMobileNumber());
				jsonObject.add("status", ERROR.GENERAL_SUCCESS);
				jsonObject.add("message", "New temporary password set for the user");
				jsonObject.add("username", username);
				return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObject.toString() ).build();
			}
			else
			{
				//return null;
				jsonObject.add("status", ERROR.NEW_PASSWORD_SET_FAILED);
				jsonObject.add("message", "Password Recovery Failed.");
				jsonObject.add("username", username);
				JsonObject jsonObj = jsonObject.build();
				return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
			log.warn(e); log.error("exception...", e); log.error("exception...", e);
            JsonObject jsonObj = jsonObject.build();
			return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
		}
	}
	
	
	public Response changePassword(String token, String currentPassword, String encPassword, String requestId, String ipAddress, String clientCode)
	{
		
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
		try
		{
			//log.info("token = " + token);
			//log.info("currentPassword = " + currentPassword);
			//log.info("encPassword = " + encPassword);
			this.swpService = this.serviceLocator.getSwpService();
			application = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, application);
			String bankCode = verifyJ.getString("issuerClientCode");
			String subject = verifyJ.getString("subjectUserDetails");
			JSONObject subjectJson = new Gson().fromJson(subject, JSONObject.class);
			
			String hql = "Select tp from User tp where tp.username = '" + subjectJson.getString("username") + "' " +
					"AND tp.userStatus = " + UserStatus.ACTIVE.ordinal() + " AND tp.deletedAt is NULL AND tp.client.clientCode = '"+clientCode+"'";
			//log.info("hql = " + hql);
			User user = (User)this.swpService.getUniqueRecordByHQL(hql);
			
			String bankKey = null;
			
			bankKey = UtilityHelper.getClientPrivate(bankCode, swpService);
			
			String cpassword = (String)UtilityHelper.decryptData(currentPassword, bankKey);
			
			
			//log.info("VerifyJ = " + verifyJ.toString());
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
				return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}

			Object reqPassword = currentPassword;
			String reqPassword_1 = (String)reqPassword;
			Object userPassword = UtilityHelper.decryptData(user.getPassword(), bankKey);
			String userPassword_1 = (String)userPassword;
			//log.info("reqPassword_1 = " + reqPassword_1);
			//log.info("userPassword_1 = " + userPassword_1);
			
			if(!reqPassword_1.equals(userPassword_1))
			{
				jsonObject.add("status", ERROR.PASSWORD_CHANGE_FAIL);
				jsonObject.add("message", "Password Change Failed");
				jsonObject.add("usename", user.getUsername());
	            JsonObject jsonObj = jsonObject.build();
	 
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			
			//log.info("current password = " + user.getPassword() + " && new password = " + cpassword);
			
			user.setFailedLoginCount(0);
			user.setLockOut(false);
			user.setOtp(null);
			
			String password = RandomStringUtils.randomAlphanumeric(8);
			//log.info("Password => " + password);
			String newEncPassword = (String)UtilityHelper.encryptData(encPassword, bankKey);
			user.setPassword(newEncPassword);
			this.swpService.updateRecord(user);
			
			AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.CHANGE_USER_PASSWORD, requestId, this.swpService, user.getUsername(), user.getUserId(), User.class.getName(), 
					"Passwod change by " + user.getFirstName() + " " + user.getLastName(), clientCode);
			
			jsonObject.add("status", ERROR.GENERAL_SUCCESS);
			jsonObject.add("message", "Password Changed Successfully");
			jsonObject.add("usename", user.getUsername());
			JsonObject jsonObj = jsonObject.build();
			return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}
		catch(Exception e)
		{
			e.printStackTrace();
			log.warn(e); log.error("exception...", e); log.error("exception...", e);
            JsonObject jsonObj = jsonObject.build();
			return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
		}
	}

	
	public Response addNewUser(String externalId, String token, String username, String email, String mobileNumber, String userStatus, String details, 
			Boolean updateFlag, String uniqueId, String clientCode, String firstName, String lastName, String otherName, 
			String roleCode, String stationCode, String requestId, String ipAddress)
	{
		//log.info("username = " + username);
        //log.info("email= " +  email);
        //log.info("mobileNumber= " +  mobileNumber);
        //log.info("userStatus= " +  userStatus);
        //log.info("details= " +  details);
        //log.info("updateFlag" +  updateFlag);
        //log.info("uniqueId= " +  uniqueId);
        //log.info("clientCode= " +  clientCode);
        //log.info("firstName= " +  firstName);
        //log.info("lastName= " +  lastName);
        //log.info("otherName= " +  otherName);
        //log.info("roleCode= " +  roleCode);
        //log.info("stationCode= " +  stationCode);
        
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
		User user = new User();
		UserRole userRole = null;
		List<String> actorRoleTypes = new ArrayList<String>();
		//RoleType actorRoleCode = null;
		try
		{
			this.swpService = this.serviceLocator.getSwpService();
			application = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, application);
			
			Map<String, String> bankKeys = application.getPrivateKeys();
			
			//log.info("clientCode = " + clientCode);
			String bankKey = bankKeys.get(clientCode);
			//log.info("Bank Key = " + bankKey);
			
			String webActivationCode = RandomStringUtils.randomAlphanumeric(32);
			
			
			if(uniqueId!=null && updateFlag!=null && updateFlag.equals(Boolean.TRUE))
			{
				//log.info("1");
				String hql = "Select tp from User tp where lower(tp.uniqueId) = '" + uniqueId + "' AND tp.deletedAt is NULL AND tp.client.clientCode = '"+clientCode+"'";
				user = (User)this.swpService.getUniqueRecordByHQL(hql);
				if(user==null)
				{
					//log.info("2");
					jsonObject.add("status", ERROR.BANK_STAFF_UPDATE_FAIL);
					jsonObject.add("message", "Invalid User Provided for Update Operation");
					JsonObject jsonObj = jsonObject.build();
					return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
				}
			}
			
			
			if(updateFlag==null || (updateFlag!=null && updateFlag.equals(Boolean.FALSE)))
			{
				//log.info("1");
				String hql = "Select tp from User tp where ((tp.username) = '" + username + "' OR tp.mobileNumber = '" + mobileNumber + "') AND tp.deletedAt is NULL AND tp.client.clientCode = '"+clientCode+"'";
				//log.info(hql);
				Collection<User> user1 = (Collection<User>)this.swpService.getAllRecordsByHQL(hql);
				if(user1!=null && user1.size()>0)
				{
					//log.info(user1.size());
					//log.info("2");
					jsonObject.add("status", ERROR.USER_EMAIL_USERNAME_EXISTS);
					jsonObject.add("message", "Username and or mobile number provided belongs to another user on the system");
					JsonObject jsonObj = jsonObject.build();
					return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
				}
			}
			//log.info("3");
			
			Application app = Application.getInstance(swpService);
			if(token!=null)
				verifyJ = UtilityHelper.verifyToken(token, app);
			if(token!=null && (verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0)))
			{
				//log.info(requestId + "Test 4");
				jsonObject.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObject.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObject.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			
			//log.info(requestId + "verifyJ ==" + verifyJ==null ? "" : verifyJ.toString());
			String actorUsername = verifyJ!=null && verifyJ.has("username") ? verifyJ.getString("username") : null;
			//log.info(requestId + "username ==" + (actorUsername==null ? "" : username));
			User actorUser = null;
			
			if(actorUsername!=null)
			{
				String hql = "select tp.user from UserRole tp where tp.user.username = '" + actorUsername + "' AND " +
						"tp.user.userStatus = " + UserStatus.ACTIVE.ordinal() + " AND tp.user.deletedAt IS NULL AND tp.isActive = 1 AND tp.deletedAt IS NULL";
				//log.info(requestId + "hql ==" + hql);
				actorUser = (User)this.swpService.getUniqueRecordByHQL(hql);
				
				
				if(actorUser==null)
				{

					//log.info(requestId + "user IS NULL");
					jsonObject.add("status", ERROR.INVALID_CLIENT_CREATION_PRIVILEDGES);
					jsonObject.add("message", "Invalid Client Creation Priviledges");
					JsonObject jsonObj = jsonObject.build();
		            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
				}
				
				hql = "Select tp from UserRole tp where tp.user.userId = " + actorUser.getUserId() + " AND tp.isActive = 1 AND tp.deletedAt IS NULL";
				Collection<UserRole> actorRoles = (Collection<UserRole>)swpService.getAllRecordsByHQL(hql);
				//actorRoleCode = actorUser.getRoleCode();
				//log.info(requestId + "actorRoles size = " + actorRoles.size());
				//log.info(requestId + "user firstname = " + actorUser.getFirstName());
				//log.info(requestId + "user lastname = " + actorUser.getLastName());
				Iterator<UserRole> uroles = actorRoles.iterator();
				while(uroles.hasNext())
				{
					actorRoleTypes.add(uroles.next().getRoleCode().name());
				}
			}
			
				
			
			
			Client client = null;
			if(roleCode.equals(RoleType.PILOT.name()) || roleCode.equals(RoleType.HUMAN_RESOURCE.name()) || roleCode.equals(RoleType.OPERATOR.name()) 
					|| roleCode.equals(RoleType.VENDOR.name()) || roleCode.equals(RoleType.CUSTOMER.name()) || roleCode.equals(RoleType.ADMIN_STAFF.name()) 
					|| roleCode.equals(RoleType.CEO.name()) || roleCode.equals(RoleType.SUPER_ADMIN.name()) || roleCode.equals(RoleType.MANAGER.name()))
			{
				//log.info("4");
				//log.info("-" + roleCode);
				//log.info(">>> " + Arrays.toString(actorRoleTypes.toArray(new String[actorRoleTypes.size()])));

				
				if(clientCode!=null)
				{
					String hql = "Select tp from Client tp where tp.clientCode = '" + clientCode + "' AND tp.deletedAt is NULL";
					client = (Client)this.swpService.getUniqueRecordByHQL(hql);
					
					if(client==null)
					{
						//log.info("5");
						jsonObject.add("status", ERROR.CLIENT_EXIST_FAIL);
						jsonObject.add("message", "You must specify the client code");
						JsonObject jsonObj = jsonObject.build();
						return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
					}
				}
				
				
				if(actorRoleTypes!=null && (actorRoleTypes.contains(RoleType.SUPER_ADMIN.name())))
				{
					//CAN CREATE EVERYONE
					String[] roleCodes = {RoleType.CUSTOMER.name(), RoleType.OPERATOR.name(), RoleType.ADMIN_STAFF.name(), 
							RoleType.HUMAN_RESOURCE.name(), RoleType.MANAGER.name(), RoleType.PILOT.name(), RoleType.VENDOR.name(), RoleType.CEO.name()};
					
					if(!Arrays.asList(roleCodes).contains(roleCode))
					{
						jsonObject.add("status", ERROR.INVALID_USER_CREATION_PRIVILEDGES);
						jsonObject.add("message", "New user account can not be created. You do not have the priviledges to carry out this action");
						JsonObject jsonObj = jsonObject.build();
						return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
					}

					if(clientCode==null)
					{
						jsonObject.add("status", ERROR.INVALID_CLIENT_CODE_PROVIDED);
						jsonObject.add("message", "Invalid client code provided. Provide yyour valid clientCode");
						JsonObject jsonObj = jsonObject.build();
						return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
					}
					
					
				}
				else if(actorRoleTypes!=null && (actorRoleTypes.contains(RoleType.ADMIN_STAFF.name())))
				{
					//log.info("Check for Admin Staff");
					String[] roleCodes = {RoleType.CUSTOMER.name(), RoleType.SUPER_ADMIN.name(), RoleType.OPERATOR.name(), 
							RoleType.MANAGER.name(), RoleType.PILOT.name()};
					
					//CAN CREATE VENDOR, HUMAN_RESOURCE
					
					if(Arrays.asList(roleCodes).contains(roleCode))
					{
						jsonObject.add("status", ERROR.INVALID_USER_CREATION_PRIVILEDGES);
						jsonObject.add("message", "New user account can not be created. You do not have the priviledges to carry out this action");
						JsonObject jsonObj = jsonObject.build();
						return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
					}

					if(clientCode==null)
					{
						jsonObject.add("status", ERROR.INVALID_CLIENT_CODE_PROVIDED);
						jsonObject.add("message", "Invalid client code provided. Provide yyour valid clientCode");
						JsonObject jsonObj = jsonObject.build();
						return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
					}
				}
				else if(actorRoleTypes!=null && (actorRoleTypes.contains(RoleType.HUMAN_RESOURCE.name())))
				{
					String[] roleCodes = {RoleType.CUSTOMER.name(), RoleType.SUPER_ADMIN.name(), RoleType.ADMIN_STAFF.name(), 
							RoleType.HUMAN_RESOURCE.name(), RoleType.VENDOR.name()};
					
					//CAN CREATE OPERATOR, PILOT, MANAGER
					
					if(Arrays.asList(roleCodes).contains(roleCode))
					{
						jsonObject.add("status", ERROR.INVALID_USER_CREATION_PRIVILEDGES);
						jsonObject.add("message", "New user account can not be created. You do not have the priviledges to carry out this action");
						JsonObject jsonObj = jsonObject.build();
						return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
					}

					if(clientCode==null)
					{
						jsonObject.add("status", ERROR.INVALID_CLIENT_CODE_PROVIDED);
						jsonObject.add("message", "Invalid client code provided. Provide yyour valid clientCode");
						JsonObject jsonObj = jsonObject.build();
						return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
					}
				}
				else
				{
					jsonObject.add("status", ERROR.INVALID_USER_CREATION_PRIVILEDGES);
					jsonObject.add("message", "New user account can not be created. You do not have the priviledges to carry out this action");
					JsonObject jsonObj = jsonObject.build();
					return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
				}
			}
			else
			{
				//log.info("5");
				jsonObject.add("status", ERROR.INVALID_USER_CREATION_PRIVILEDGES);
				jsonObject.add("message", "New user account can not be created. You do not have the priviledges to carry out this action");
				JsonObject jsonObj = jsonObject.build();
				return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}

			//user.setRoleCode(RoleType.valueOf(roleCode));
			//log.info("6");
			user.setWebActivationCode(webActivationCode);
			//log.info("7");
			user.setFailedLoginCount(0);
			//log.info("8");
			if(updateFlag==null || (updateFlag!=null && updateFlag.equals(Boolean.FALSE)))
			{
				//log.info("9");
				user.setUsername(username);
				//log.info("91");
				user.setEmail(email);
			}
			//log.info("10");
			user.setLockOut(Boolean.FALSE);
			//log.info("11");
			
			if(uniqueId!=null && updateFlag!=null && updateFlag.equals(Boolean.TRUE))
			{
				user.setUpdatedAt(new Date());
				//log.info("1-13");
			}
			else
			{
				String rnd="";
				boolean rndTrue = true;
				while(rndTrue==true)
				{
					rnd = RandomStringUtils.randomNumeric(12).toUpperCase();
					String sql = "Select tp from User tp where tp.uniqueId = '" + rnd + "' AND tp.deletedAt IS NULL AND tp.client.clientCode = '"+clientCode+"'";
					Collection<User> usrCheck = (Collection<User>)this.swpService.getAllRecordsByHQL(sql);
					if(usrCheck!=null && usrCheck.size()>0)
					{
						
					}
					else
					{
						rndTrue = false;
					}
				}
				user.setUniqueId(rnd);
				user.setCreatedAt(new Date());
				//log.info("12");
				user.setUpdatedAt(new Date());
				//log.info("13");
			}
			
			
			Station station = null;
			if(roleCode.equals(RoleType.OPERATOR.name()))
			{
				String hql = "Select tp from Station tp where tp.stationCode = '" + stationCode + "' AND tp.deletedAt is NULL";
				station = (Station)this.swpService.getUniqueRecordByHQL(hql);
				
				if(station==null)
				{
					//log.info("5");
					jsonObject.add("status", ERROR.STATION_NOT_FOUND);
					jsonObject.add("message", "You must specify a valid station code");
					JsonObject jsonObj = jsonObject.build();
					return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
				}
				user.setCurrentStation(station);
			}
			
			
			//user.setUserStatus(UserStatus.INACTIVE);
			user.setExternalId(externalId);
			user.setMobileNumber(mobileNumber);
			//log.info("14");
			user.setFirstName(firstName);
			//log.info("15");
			user.setLastName(lastName);
			//log.info("16");
			user.setOtherName(otherName);
			//log.info("17");
			user.setEmail(email);
			//log.info("18");
			user.setClient(client);
			//log.info("18");
			

			String password = null;
			if(uniqueId!=null && updateFlag!=null && updateFlag.equals(Boolean.TRUE))
			{
				this.swpService.updateRecord(user);
			}
			else
			{
				password = RandomStringUtils.randomAlphanumeric(8).toUpperCase();
				//password = "pass123";
				//log.info("Password => " + password);
				String encPassword = UtilityHelper.bcryptData(password);
				//String encPassword = (String)UtilityHelper.encryptData(password, bankKey);
				user.setPassword(encPassword);
				user.setUserStatus(UserStatus.ACTIVE);
				user = (User)this.swpService.createNewRecord(user);
				
				userRole = new UserRole();
				userRole.setCreatedAt(new Date());
				userRole.setUpdatedAt(new Date());
				userRole.setUser(user);
				userRole.setIsActive(Boolean.TRUE);
				userRole.setRoleCode(RoleType.valueOf(roleCode));
				userRole = (UserRole)this.swpService.createNewRecord(userRole);
				//log.info("create new action");
				JSONObject js = new JSONObject();
				JSONObject txnObjects = new JSONObject();
				int a =0;
				js.put("id", user.getUserId());
				js.put("roleCode", userRole.getRoleCode().ordinal());
				js.put("webActivationCode", user.getWebActivationCode());
				js.put("failedLoginCount", user.getFailedLoginCount());
				js.put("username", user.getUsername());
				js.put("lockout", user.getLockOut());
				js.put("createdAt", sdf1.format(user.getCreatedAt()));
				js.put("updatedAt", sdf1.format(user.getUpdatedAt()));
				js.put("mobileNumber", user.getMobileNumber());
				js.put("firstName", user.getFirstName());
				js.put("lastName", user.getLastName());
				if(user.getOtherName()!=null)
					js.put("otherName", user.getOtherName());
				js.put("email", user.getEmail());
				if(user.getExternalId()!=null)
					js.put("externalId", user.getExternalId());
				js.put("uniqueId", user.getUniqueId());
				js.put("userStatus", user.getUserStatus().ordinal());
				txnObjects.put("" + a++, js);
				//log.info("txnObjects---" + txnObjects.toString());
				
				String message = "Welcome to ZRL? Your Password for your new ZRL account is " + password;
	            //UtilityHelper.sendSMS(this.swpService, message, user.getMobileNumber());
				try{
					new Thread(new SmsSender(this.swpService, message, user.getMobileNumber())).start();
				}catch(Exception e)
				{
					e.printStackTrace();
				}
			}
			
			
			
			
			actorUsername = verifyJ!=null && verifyJ.has("username") ? verifyJ.getString("username") : null;
			User userActor = null;
			if(actorUsername!=null)
				userActor = (User)this.swpService.getUniqueRecordByHQL("Select tp from User tp where tp.username = '"+actorUsername+"' AND tp.deletedAt IS NULL  AND tp.client.clientCode = '"+clientCode+"'");
    		
			
			//(String, RequestType, String, SwpService, String, Long, String)
			//(String, RequestType, String, SwpService, String, Long, String, String)
			
			if(uniqueId!=null && updateFlag!=null && updateFlag.equals(Boolean.TRUE))
			{
				AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.NEW_USER_CREATION, requestId, this.swpService, 
					verifyJ!=null && verifyJ.has("username") ? verifyJ.getString("username") : null, userActor==null ? user.getUserId() : userActor.getUserId() , User.class.getName(), 
							"User account - " + user.getUsername() + " - was created " + (userActor==null ? ("by " + user.getFirstName() + user.getLastName()) : (user.getFirstName() + user.getLastName())), clientCode);
				
				JSONObject userDetails = new JSONObject();
				userDetails.put("username", user.getUsername());
				userDetails.put("email", user.getEmail());
				userDetails.put("priviledges", user.getPrivileges());
				userDetails.put("webActivationCode", webActivationCode);
				userDetails.put("uniqueId", user.getUniqueId());
				String userDetailsString = new Gson().toJson(userDetails); 
				
				jsonObject.add("status", ERROR.GENERAL_SUCCESS);
				jsonObject.add("roleCode", roleCode);
				jsonObject.add("message", "New User Account Updated Successfully");
				jsonObject.add("username", user.getUsername());
				jsonObject.add("user", userDetailsString);
				jsonObject.add("userAccount", new Gson().toJson(user));
			}
			else
			{
				AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.UPDATE_USER, requestId, this.swpService, 
					verifyJ!=null && verifyJ.has("username") ? verifyJ.getString("username") : null, userActor==null ? user.getUserId() : userActor.getUserId() , User.class.getName(), 
							"User account - " + user.getUsername() + " - was updated by " + userActor.getFirstName() + " " + userActor.getLastName(), clientCode);
				
				JSONObject userDetails = new JSONObject();
				userDetails.put("username", username);
				userDetails.put("email", username);
				userDetails.put("password", password);
				userDetails.put("role", userRole.getRoleCode().name());
				userDetails.put("priviledges", user.getPrivileges());
				userDetails.put("webActivationCode", webActivationCode);
				userDetails.put("uniqueId", user.getUniqueId());
				String userDetailsString = new Gson().toJson(userDetails); 
				
				jsonObject.add("status", ERROR.GENERAL_SUCCESS);
				jsonObject.add("roleCode", roleCode);
				jsonObject.add("message", "New User Account Created Successfully");
				jsonObject.add("username", username);
				jsonObject.add("password", password);
				jsonObject.add("user", userDetailsString);
				jsonObject.add("userAccount", new Gson().toJson(user));
			}
			
			
			
			
			
			//log.info("Create New User = " + jsonObject.toString());
			JsonObject jsonObj = jsonObject.build();
			return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			
		}
		catch(Exception e)
		{
			e.printStackTrace();
			log.warn(e); log.error("exception...", e); log.error("exception...", e);
            JsonObject jsonObj = jsonObject.build();
			return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
		}
	}
	
	
    

	public Response listUsers(String userRoles, String token, String requestId, String ipAddress, String clientCode) {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
		try
		{
			this.swpService = this.serviceLocator.getSwpService();
			application = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, application);
			Map<String, String> bankKeys = application.getPrivateKeys();
			
			
			Application app = Application.getInstance(swpService);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				JsonObjectBuilder jsonObjectResponse = Json.createObjectBuilder();
				jsonObjectResponse.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObjectResponse.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObjectResponse.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			//log.info("verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			//log.info("issuerBankCode ==" + issuerBankCode);
			String userBranchCode = verifyJ.getString("branchCode");
			//log.info("userBranchCode ==" + userBranchCode);
			String userBankCode = verifyJ.getString("bankCode");
			//log.info("userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			//log.info("roleCode ==" + (roleCode==null ? "" : roleCode));
			
			//log.info("3");
			
			
			
			if(!roleCode.equals(RoleType.ADMIN_STAFF.name()))
			{
				//log.info("5");
				jsonObject.add("status", ERROR.INSUFFICIENT_PRIVILEDGES);
				jsonObject.add("message", "You do not have the priviledges to carry out this action");
				JsonObject jsonObj = jsonObject.build();
				return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			
			
			String hql = "Select tp from User tp WHERE tp.deletedAt IS NULL AND tp.client.clientCode = '"+clientCode+"'";
			
			
			if(userRoles!=null)
			{
				JSONArray userRolesArray = new JSONArray(userRoles);
				List<Integer> lStr = new ArrayList<Integer>();
				for(int i=0; i<userRolesArray.length(); i++)
				{
					lStr.add(RoleType.valueOf(userRolesArray.getString(i)).ordinal());
				}
				String hql2 = "Select tp.user.userId from UserRole tp where tp.roleCode IN (" + StringUtils.join(lStr, ',') + ")";
				List<Long> uRoleUserIds = (List<Long>)swpService.getAllRecordsByHQL(hql2);
				hql = hql + " AND tp.userId IN (" + StringUtils.join(uRoleUserIds, ',') + ")";
			}
			Collection<User> userList = (Collection<User>)this.swpService.getAllRecordsByHQL(hql);
			
			hql = "Select tp from UserRole tp where tp.deletedAt IS NULL AND tp.isActive = 1";
			Collection<UserRole> allUserRoles = (Collection<UserRole>)swpService.getAllRecordsByHQL(hql);
			Iterator<UserRole> usRole = allUserRoles.iterator();
			JSONObject usRoles_ = new JSONObject();
			
			while(usRole.hasNext())
			{
				UserRole usR = usRole.next();
				String roles_ = usRoles_.has(usR.getUser().getUniqueId()) ? (usR.getUser().getUniqueId()) : null;
				if(roles_==null)
				{
					roles_ = usR.getRoleCode().name();
				}
				else
				{
					roles_ = roles_ + ", " + usR.getRoleCode().name();
				}
				usRoles_.put(usR.getUser().getUniqueId(), roles_);
			}
			
			if(userList!=null && userList.size()>0)
			{
				Iterator<User> iterator = userList.iterator();
				
				JSONArray userArrayList = new JSONArray();
				while(iterator.hasNext())
				{
					User usr = iterator.next();
					if(usRoles_.has(usr.getUniqueId()))
					{
						JSONObject userObjects = new JSONObject();
						userObjects.put("roleCode", usRoles_.getString(usr.getUniqueId()));
						if(usr.getUsername()!=null)
							userObjects.put("username", usr.getUsername());
						if(usr.getEmail()!=null)
							userObjects.put("email", usr.getEmail());
						if(usr.getUserStatus()!=null)
							userObjects.put("userStatus", usr.getUserStatus().name());
						if(usr.getMobileNumber()!=null)
							userObjects.put("mobileNumber", usr.getMobileNumber());
						if(usr.getFirstName()!=null)
							userObjects.put("firstName", usr.getFirstName());
						if(usr.getLastName()!=null)
							userObjects.put("lastName", usr.getLastName());
						if(usr.getOtherName()!=null)
							userObjects.put("otherName", usr.getOtherName());
						
						if(usr.getLockOut()!=null)
							userObjects.put("lockOut", usr.getLockOut()==null ? 0 : usr.getLockOut());
						if(usr.getFailedLoginCount()!=null)
							userObjects.put("failedLoginCount", usr.getFailedLoginCount()==null ? 0 : usr.getFailedLoginCount());
						if(usr.getCreatedAt()!=null)
							userObjects.put("created_at", usr.getCreatedAt().toString());
						if(usr.getLastLoginDate()!=null)
							userObjects.put("lastLoginDate", usr.getLastLoginDate().toString());
						userArrayList.put(userObjects);
					}
				}

				
				jsonObject.add("userList", userArrayList.toString());
				jsonObject.add("status", ERROR.GENERAL_SUCCESS);
				jsonObject.add("message", "User List");
				
				JsonObject jsonObj = jsonObject.build();
				return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			else
			{
				jsonObject.add("status", ERROR.EMPTY_USER_LIST);
				jsonObject.add("message", "No users currently available");
				JsonObject jsonObj = jsonObject.build();
				return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			
			
		}
		catch(Exception e)
		{
			e.printStackTrace();
			log.warn(e); log.error("exception...", e); log.error("exception...", e);
            JsonObject jsonObj = jsonObject.build();
			return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
		}
	}

	public Response updateUserStatus( String token, String username, String userStatus, String requestId, String ipAddress, String clientCode) {
		// TODO Auto-generated method stub
		JsonObjectBuilder jsonObject = Json.createObjectBuilder();
		try
		{
			this.swpService = this.serviceLocator.getSwpService();
			application = Application.getInstance(swpService);
			JSONObject verifyJ = UtilityHelper.verifyToken(token, application);
			Map<String, String> bankKeys = application.getPrivateKeys();
			
			
			Application app = Application.getInstance(swpService);
			if(verifyJ.length()==0 || (verifyJ.length()>0 && verifyJ.has("active") && verifyJ.getInt("active")==0))
			{
				JsonObjectBuilder jsonObjectResponse = Json.createObjectBuilder();
				jsonObjectResponse.add("status", ERROR.FORCE_LOGOUT_USER);
				jsonObjectResponse.add("message", "Your session has expired. Please log in again");
				JsonObject jsonObj = jsonObjectResponse.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			//log.info("verifyJ ==" + verifyJ.toString());
			String issuerBankCode = verifyJ.getString("issuerBankCode");
			//log.info("issuerBankCode ==" + issuerBankCode);
			String userBranchCode = verifyJ.getString("branchCode");
			//log.info("userBranchCode ==" + userBranchCode);
			String userBankCode = verifyJ.getString("bankCode");
			//log.info("userBankCode ==" + userBankCode);
			String roleCode = verifyJ.has("roleCode") ? verifyJ.getString("roleCode") : null;
			//log.info("roleCode ==" + (roleCode==null ? "" : roleCode));
			
			String actorUsername = verifyJ!=null && verifyJ.has("username") ? verifyJ.getString("username") : null;
			//log.info(requestId + "username ==" + (actorUsername==null ? "" : username));
			User actorUser = null;
			
			if(actorUsername!=null)
			{
				String hql = "select tp from User tp where tp.username = '" + actorUsername + "' AND " +
						"tp.userStatus = " + UserStatus.ACTIVE.ordinal() + " AND tp.deletedAt IS NULL";
				//log.info(requestId + "hql ==" + hql);
				actorUser = (User)this.swpService.getUniqueRecordByHQL(hql);
				
				
				if(actorUser==null)
				{

					//log.info(requestId + "user IS NULL");
					jsonObject.add("status", ERROR.INVALID_CLIENT_CREATION_PRIVILEDGES);
					jsonObject.add("message", "Invalid Client Creation Priviledges");
					JsonObject jsonObj = jsonObject.build();
		            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
				}
				//log.info(requestId + "user roleCoe = " + roleCode);
				//log.info(requestId + "user firstname = " + actorUser.getFirstName());
				//log.info(requestId + "user lastname = " + actorUser.getLastName());
				
			}
			
			//log.info("3");
			
			try
			{
				UserStatus us = UserStatus.valueOf(userStatus);
				if(us==null)
				{
					JsonObjectBuilder jsonObjectResponse = Json.createObjectBuilder();
					jsonObjectResponse.add("status", ERROR.INVALID_USER_STATUS);
					jsonObjectResponse.add("message", "User status invalid");
					JsonObject jsonObj = jsonObjectResponse.build();
		            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
				}
			}
			catch(Exception e)
			{
				JsonObjectBuilder jsonObjectResponse = Json.createObjectBuilder();
				jsonObjectResponse.add("status", ERROR.INVALID_USER_STATUS);
				jsonObjectResponse.add("message", "User status invalid");
				JsonObject jsonObj = jsonObjectResponse.build();
	            return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			
			
			if(!roleCode.equals(RoleType.ADMIN_STAFF.name()))
			{
				//log.info("5");
				jsonObject.add("status", ERROR.INSUFFICIENT_PRIVILEDGES);
				jsonObject.add("message", "You do not have the priviledges to carry out this action");
				JsonObject jsonObj = jsonObject.build();
				return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			
			
			String hql = "Select tp from User tp where tp.deleted_at IS NULL AND tp.username = '" + username + "' AND tp.client.clientCode = '"+clientCode+"'";
			User usr = (User)this.swpService.getUniqueRecordByHQL(hql);
			if(usr!=null)
			{
				usr.setUserStatus(UserStatus.valueOf(userStatus));
				this.swpService.updateRecord(usr);
				
				jsonObject.add("status", ERROR.GENERAL_SUCCESS);
				jsonObject.add("message", "User updated successfully");
				
				JsonObject jsonObj = jsonObject.build();
				
				AuditTrail ad = UtilityHelper.createAuditTrailEntry(ipAddress, RequestType.UPDATE_USER, requestId, this.swpService, usr.getUsername(), usr.getUserId(), User.class.getName(), 
						"Update user status for the user -  " + usr.getFirstName() + " " + usr.getLastName() + " - by - " + actorUser.getFirstName() + " " + actorUser.getLastName() , clientCode);
				
				
				return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			else
			{
				jsonObject.add("status", ERROR.EMPTY_USER_LIST);
				jsonObject.add("message", "No user found matching username provided");
				JsonObject jsonObj = jsonObject.build();
				return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
			}
			
		}
		catch(Exception e)
		{
			e.printStackTrace();
			log.warn(e); log.error("exception...", e); log.error("exception...", e);
            JsonObject jsonObj = jsonObject.build();
			return UtilityHelper.getNoCacheResponseBuilder( Response.Status.OK ).entity( jsonObj.toString() ).build();
		}
	}

}